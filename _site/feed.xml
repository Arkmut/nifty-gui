<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title type="text">Nifty GUI</title>
<generator uri="https://github.com/jekyll/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="/feed.xml" />
<link rel="alternate" type="text/html" href="" />
<updated>2014-12-26T01:19:47+01:00</updated>
<id>/</id>
<author>
  <name>void256</name>
  <uri>/</uri>
  <email>void@lessvoid.com</email>
</author>


  

<entry>
  <title type="html"><![CDATA[Moving the Blog to github pages]]></title>
  <link rel="alternate" type="text/html" href="/blog/update/new-blog/" />
  <id>/blog/update/new-blog</id>
  <published>2014-12-07T23:00:00+01:00</published>
  <updated>2014-12-07T23:00:00+01:00</updated>
  <author>
    <name>void256</name>
    <uri></uri>
    <email>void@lessvoid.com</email>
  </author>
  <content type="html">&lt;p&gt;So, the original blog at http://nifty-gui.lessvoid.com was using Wordpress … and was hacked end of November O_o&lt;/p&gt;

&lt;p&gt;And since we didn’t want that to happen again, we’ve now moved the Blog to github pages. This has the benefit of being static pages only - no database, no wordpress, well, and no comments unfortunately. But there are other ways to connect.&lt;/p&gt;

&lt;p&gt;So for now the Nifty GUI blog has it’s new home here for the time being :)&lt;/p&gt;

&lt;p&gt;PS: Images are still missing for now … stay tuned&lt;/p&gt;

&lt;p&gt;void&lt;/p&gt;


  &lt;p&gt;&lt;a href=&quot;/blog/update/new-blog/&quot;&gt;Moving the Blog to github pages&lt;/a&gt; was originally published by void256 at &lt;a href=&quot;&quot;&gt;Nifty GUI&lt;/a&gt; on December 07, 2014.&lt;/p&gt;</content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Nifty 1.4 has been released]]></title>
  <link rel="alternate" type="text/html" href="/uncategorized/nifty-1-4-has-been-released/" />
  <id>/uncategorized/nifty-1-4-has-been-released</id>
  <published>2014-07-08T21:04:08+02:00</published>
  <updated>2014-07-08T21:04:08+02:00</updated>
  <author>
    <name>void256</name>
    <uri></uri>
    <email>void@lessvoid.com</email>
  </author>
  <content type="html">&lt;p&gt;Nifty 1.4 contains numerous bugfixes and features. However, you should view it as a more stable and grown up Nifty 1.3 and not as something completely new. That being said, there might be some minor compile-time incompatibilities with 1.3.x but it shouldn&#39;t be nothing too serious.&lt;/p&gt;
&lt;p&gt;Kudos to the following 1.4 committers. Most of the new features like the libGDX renderer (Martin Karing) or a complete refactoring of the batched renderer (Aaron Mahan) - which now even supports multiple texture atlases - was only possible because of the hard work of the following people (alphabetical order):&lt;/p&gt;
&lt;p&gt;Aaron Mahan&lt;br /&gt;
Alexander Tumin&lt;br /&gt;
Guillaume Simard&lt;br /&gt;
Illarion Jenkins - CI&lt;br /&gt;
Joachim Durchholz&lt;br /&gt;
Jonathan Fischer Friberg&lt;br /&gt;
Joris van der Wel&lt;br /&gt;
Julien Gouesse&lt;br /&gt;
Mark&lt;br /&gt;
Martin Karing&lt;br /&gt;
Stefan Hofmann&lt;br /&gt;
Tony Ivanov&lt;br /&gt;
Torge Rothe&lt;br /&gt;
Xerxes R&amp;aring;nby&lt;br /&gt;
Zehao Sun&lt;br /&gt;
bgroenks&lt;br /&gt;
relu91&lt;br /&gt;
vilarion&lt;/p&gt;
&lt;p&gt;THANK YOU!&lt;/p&gt;
&lt;p&gt;Here are the download links for Nifty 1.4.0:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http:&amp;#47;&amp;#47;sourceforge.net&amp;#47;projects&amp;#47;nifty-gui&amp;#47;files&amp;#47;nifty-gui&amp;#47;1.4&amp;#47;nifty-1.4.0-changelog.txt&amp;#47;download&quot;&gt;Nifty 1.4.0 change log (sf.net)&amp;lt;&amp;#47;a&amp;gt;&lt;br /&gt;
&lt;a href=&quot;https:&amp;#47;&amp;#47;sourceforge.net&amp;#47;projects&amp;#47;nifty-gui&amp;#47;files&amp;#47;nifty-gui&amp;#47;1.4&amp;#47;&quot;&gt;Nifty 1.4.0 Download Folder at sf.net&amp;lt;&amp;#47;a&amp;gt;&lt;br /&gt;
&lt;a href=&quot;http:&amp;#47;&amp;#47;nifty-gui.sourceforge.net&amp;#47;projects&amp;#47;1.4.0&amp;#47;&quot;&gt;Nifty 1.4.0 Maven Projects Page (browse the JavaDoc online!)&amp;lt;&amp;#47;a&amp;gt;&lt;br /&gt;
&lt;a href=&quot;https:&amp;#47;&amp;#47;github.com&amp;#47;void256&amp;#47;nifty-gui&amp;#47;tree&amp;#47;nifty-main-1.4.0&quot;&gt;Nifty 1.4.0 on github (browse source online)&amp;lt;&amp;#47;a&amp;gt;
&lt;p&gt;For all Maven users: Simply add our sf.net Nifty Maven Repo to your pom.xml:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&lt;repositories&gt;&lt;br /&gt;
&lt;repository&gt;&lt;br /&gt;
&lt;id&gt;nifty-maven-repo.sourceforge.net&amp;lt;&amp;#47;id&amp;gt;&lt;br /&gt;
&lt;url&gt;http:&amp;#47;&amp;#47;nifty-gui.sourceforge.net&amp;#47;nifty-maven-repo&amp;lt;&amp;#47;url&amp;gt;&lt;br /&gt;
&amp;lt;&amp;#47;repository&amp;gt;&lt;br /&gt;
&amp;lt;&amp;#47;repositories&amp;gt;&amp;lt;&amp;#47;code&amp;gt;
&lt;p&gt;and upgrade your dependency to 1.4.0:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&lt;dependency&gt;&lt;br /&gt;
&lt;groupid&gt;lessvoid&amp;lt;&amp;#47;groupId&amp;gt;&lt;br /&gt;
&lt;artifactid&gt;nifty&amp;lt;&amp;#47;artifactId&amp;gt;&lt;br /&gt;
&lt;version&gt;1.4.0&amp;lt;&amp;#47;version&amp;gt;&lt;br /&gt;
&amp;lt;&amp;#47;dependency&amp;gt;&lt;br /&gt;
&amp;lt;&amp;#47;code&amp;gt;
&lt;p&gt;Have a lot of fun with Nifty 1.4.0! The best Nifty since Nifty ;-)&lt;br /&gt;
void&lt;/p&gt;
&lt;/version&gt;&lt;/artifactid&gt;&lt;/groupid&gt;&lt;/dependency&gt;&lt;/code&gt;&lt;/p&gt;&lt;/url&gt;&lt;/id&gt;&lt;/repository&gt;&lt;/repositories&gt;&lt;/code&gt;&lt;/p&gt;&lt;/a&gt;&lt;/a&gt;&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/uncategorized/nifty-1-4-has-been-released/&quot;&gt;Nifty 1.4 has been released&lt;/a&gt; was originally published by void256 at &lt;a href=&quot;&quot;&gt;Nifty GUI&lt;/a&gt; on July 08, 2014.&lt;/p&gt;</content>
</entry>


  

<entry>
  <title type="html"><![CDATA[JogAmp BOF Siggraph 2013]]></title>
  <link rel="alternate" type="text/html" href="/uncategorized/jogamp-bof-siggraph-2013/" />
  <id>/uncategorized/jogamp-bof-siggraph-2013</id>
  <published>2013-08-01T22:46:52+02:00</published>
  <updated>2013-08-01T22:46:52+02:00</updated>
  <author>
    <name></name>
    <uri></uri>
    
  </author>
  <content type="html">&lt;p&gt;The &lt;a href=&quot;http:&amp;#47;&amp;#47;jogamp.org&amp;#47;&quot;&gt;JogAmp&amp;lt;&amp;#47;a&amp;gt; project had a BOF session at this years Siggraph convention. They presented a lot of amazing projects that use JogAmp. You can find the original &lt;a href=&quot;http:&amp;#47;&amp;#47;www.youtube.com&amp;#47;watch?v=X3Id2VGR1Ik&quot;&gt;session video at youtube&amp;lt;&amp;#47;a&amp;gt;.
&lt;p&gt;As a part of their presentation they showcased Nifty (look for it at &lt;a href=&quot;http:&amp;#47;&amp;#47;youtu.be&amp;#47;X3Id2VGR1Ik?t=20m54s&quot;&gt;0:20:54&amp;lt;&amp;#47;a&amp;gt; but make sure you watch the whole video too!) with some slides, a demo and a showcase video that we&#39;ve prepared for them. The original video was cut a bit because of the time limitations of their presentation.
&lt;p&gt;However the original full-length video is far too awesome so we&#39;d like to show it to you right here :)&lt;/p&gt;
&lt;p&gt;Featuring (in the order of appearance):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&amp;#47;&amp;#47;www.desura.com&amp;#47;games&amp;#47;piratehell&quot;&gt;Pirate Hell by Ceyphren&amp;lt;&amp;#47;a&amp;gt;&amp;lt;&amp;#47;li&amp;gt;
&lt;li&gt;&lt;a href=&quot;http:&amp;#47;&amp;#47;www.herodex.net&quot;&gt;HeroDex by Zero Separation&amp;lt;&amp;#47;a&amp;gt;&amp;lt;&amp;#47;li&amp;gt;
&lt;li&gt;&lt;a href=&quot;http:&amp;#47;&amp;#47;www.indiedb.com&amp;#47;games&amp;#47;attack-of-the-gelatinous-blob&quot;&gt;Attack of the Gelatinous Blob by Brent Owens&amp;lt;&amp;#47;a&amp;gt;&amp;lt;&amp;#47;li&amp;gt;
&lt;li&gt;&lt;a href=&quot;http:&amp;#47;&amp;#47;www.4realms.net&amp;#47;&quot;&gt;CHAOS by 4Realms&amp;lt;&amp;#47;a&amp;gt;&amp;lt;&amp;#47;li&amp;gt;
&lt;li&gt;&lt;a href=&quot;http:&amp;#47;&amp;#47;illarion.org&amp;#47;general&amp;#47;de_startpage.php&quot;&gt;Illarion by Illarion&amp;lt;&amp;#47;a&amp;gt;&amp;lt;&amp;#47;li&amp;gt;&lt;br /&gt;
&amp;lt;&amp;#47;ul&amp;gt;
&lt;p&gt;Thanks for providing footage and&amp;#47;or demo versions people! :)&lt;/p&gt;
&lt;p&gt;&lt;iframe src=&quot;http:&amp;#47;&amp;#47;player.vimeo.com&amp;#47;video&amp;#47;71520617&quot; width=&quot;640&quot; height=&quot;324&quot; frameborder=&quot;0&quot; webkitallowfullscreen=&quot;&quot; mozallowfullscreen=&quot;&quot; allowfullscreen=&quot;&quot;&gt;&amp;lt;&amp;#47;iframe&amp;gt;
&lt;p&gt;&lt;a href=&quot;http:&amp;#47;&amp;#47;vimeo.com&amp;#47;71520617&quot;&gt;JogAmp BOF Siggraph 2013 - Full Nifty GUI games showcase&amp;lt;&amp;#47;a&amp;gt; from &lt;a href=&quot;http:&amp;#47;&amp;#47;vimeo.com&amp;#47;user1070526&quot;&gt;void&amp;lt;&amp;#47;a&amp;gt; on &lt;a href=&quot;https:&amp;#47;&amp;#47;vimeo.com&quot;&gt;Vimeo&amp;lt;&amp;#47;a&amp;gt;.&amp;lt;&amp;#47;p&amp;gt;
&lt;p&gt;Have fun,&lt;br /&gt;
void&lt;/p&gt;
&lt;/a&gt;&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;&lt;/iframe&gt;&lt;/p&gt;&lt;/a&gt;&lt;/li&gt;&lt;/a&gt;&lt;/li&gt;&lt;/a&gt;&lt;/li&gt;&lt;/a&gt;&lt;/li&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/a&gt;&lt;/p&gt;&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/uncategorized/jogamp-bof-siggraph-2013/&quot;&gt;JogAmp BOF Siggraph 2013&lt;/a&gt; was originally published by  at &lt;a href=&quot;&quot;&gt;Nifty GUI&lt;/a&gt; on August 01, 2013.&lt;/p&gt;</content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Nifty 1.3.3 has been released]]></title>
  <link rel="alternate" type="text/html" href="/uncategorized/nifty-1-3-3-has-been-released/" />
  <id>/uncategorized/nifty-1-3-3-has-been-released</id>
  <published>2013-06-22T01:29:36+02:00</published>
  <updated>2013-06-22T01:29:36+02:00</updated>
  <author>
    <name></name>
    <uri></uri>
    
  </author>
  <content type="html">&lt;p&gt;Nifty 1.3.3 is mainly a bugfix release and is compatible with older Nifty 1.3.x versions.&lt;/p&gt;
&lt;p&gt;The main new feature is the batched renderer for improved rendering speed of more complex GUIs (with many elements) and OpenGL Core Profile support (in native LWJGL&amp;#47;JOGL renderer).&lt;/p&gt;
&lt;p&gt;Usage of the batched renderer is easy. Instead of your regular RenderDevice implementation you use the new BatchRenderDevice that Nifty already provides together with the BatchRendererBackend implementation and the size of the texture atlas. The following examples all use a texture atlas of 2048x2048 pixels which worked very well for all Nifty standard examples.&lt;/p&gt;
&lt;p&gt;Examples:&lt;br /&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;a id=&quot;more-562&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;LWJGL Example:&amp;lt;&amp;#47;strong&amp;gt;
&lt;pre class=&quot;brush:java&quot;&gt;BatchRenderDevice renderDevice = new BatchRenderDevice(&lt;br /&gt;
new LwjglBatchRenderBackend(), 2048, 2048);&amp;lt;&amp;#47;pre&amp;gt;
&lt;p&gt;&lt;strong&gt;LWJGL Core Profile Example:&amp;lt;&amp;#47;strong&amp;gt;
&lt;pre class=&quot;brush:java&quot;&gt;BatchRenderDevice renderDevice = new BatchRenderDevice(&lt;br /&gt;
new LwjglBatchRenderBackendCoreProfile(), 2048, 2048);&amp;lt;&amp;#47;pre&amp;gt;
&lt;p&gt;And if you prefer JOGL (which we&#39;ve updated and added new example code for as well):&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;JOGL Example:&amp;lt;&amp;#47;strong&amp;gt;
&lt;pre class=&quot;brush:java&quot;&gt;BatchRenderDevice renderDevice = new BatchRenderDevice(&lt;br /&gt;
new JoglBatchRenderBackend(), 2048, 2048);&amp;lt;&amp;#47;pre&amp;gt;
&lt;p&gt;&lt;strong&gt;JOGL Core Profile Example:&amp;lt;&amp;#47;strong&amp;gt;
&lt;pre class=&quot;brush:java&quot;&gt;BatchRenderDevice renderDevice = new BatchRenderDevice(&lt;br /&gt;
new JoglBatchRenderBackendCoreProfile(), 2048, 2048);&amp;lt;&amp;#47;pre&amp;gt;
&lt;p&gt;Usage in jMonkeyEngine is even easier. You just have to call the constructor of the NiftyJmeDisplay with two additional parameters (the width and height of the texture atlas you&#39;d like to use):&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;jMonkeyEngine Example:&amp;lt;&amp;#47;strong&amp;gt;
&lt;pre class=&quot;brush:java&quot;&gt;    niftyDisplay = new NiftyJmeDisplayTime(&lt;br /&gt;
        assetManager,&lt;br /&gt;
        inputManager,&lt;br /&gt;
        audioRenderer,&lt;br /&gt;
        guiViewPort,&lt;br /&gt;
        2048, 2048); &amp;#47;&amp;#47; add these two to enable the batched renderer&amp;lt;&amp;#47;pre&amp;gt;
&lt;p&gt;As always it&#39;s up to you to initialize LWJGL&amp;#47;JOGL before initializing Nifty but you can find code on how to do that in the nifty-examples project.&lt;/p&gt;
&lt;p&gt;If you&#39;d like to learn more about the batched renderer and how it works you can find out more about it in this two part blog post:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http:&amp;#47;&amp;#47;nifty-gui.lessvoid.com&amp;#47;archives&amp;#47;505&quot;&gt;Inside Niftys RenderDevice and how to speed it up (Part 1&amp;#47;2)&amp;lt;&amp;#47;a&amp;gt;&lt;br /&gt;
&lt;a href=&quot;http:&amp;#47;&amp;#47;nifty-gui.lessvoid.com&amp;#47;archives&amp;#47;530&quot;&gt;Inside Niftys RenderDevice and how to speed it up (Part 2&amp;#47;2)&amp;lt;&amp;#47;a&amp;gt;
&lt;p&gt;And here are the other Nifty links:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http:&amp;#47;&amp;#47;sourceforge.net&amp;#47;projects&amp;#47;nifty-gui&amp;#47;files&amp;#47;nifty-gui&amp;#47;1.3.3&amp;#47;nifty-1.3.3-changelog.txt&amp;#47;download&quot;&gt;Nifty 1.3.3 change log (sf.net)&amp;lt;&amp;#47;a&amp;gt;&lt;br /&gt;
&lt;a href=&quot;https:&amp;#47;&amp;#47;sourceforge.net&amp;#47;projects&amp;#47;nifty-gui&amp;#47;files&amp;#47;nifty-gui&amp;#47;1.3.3&amp;#47;&quot;&gt;Nifty 1.3.3 Download Folder at sf.net&amp;lt;&amp;#47;a&amp;gt;&lt;br /&gt;
&lt;a href=&quot;http:&amp;#47;&amp;#47;nifty-gui.sourceforge.net&amp;#47;projects&amp;#47;1.3.3&amp;#47;&quot;&gt;Nifty 1.3.3 Maven Projects Page (browse the JavaDoc online!)&amp;lt;&amp;#47;a&amp;gt;&lt;br /&gt;
Get a nightly jME3 build with Nifty 1.3.3 (starting tommorow or so ;) since it was just been added with &lt;a href=&quot;http:&amp;#47;&amp;#47;code.google.com&amp;#47;p&amp;#47;jmonkeyengine&amp;#47;source&amp;#47;detail?r=10656&quot;&gt;this commit&amp;lt;&amp;#47;a&amp;gt; to the jme repo)
&lt;p&gt;For all Maven users: Simply add our sf.net Nifty Maven Repo to your pom.xml:&lt;/p&gt;
&lt;pre class=&quot;brush:xml&quot;&gt;  &lt;repositories&gt;&lt;br /&gt;
    &lt;repository&gt;&lt;br /&gt;
      &lt;id&gt;nifty-maven-repo.sourceforge.net&amp;lt;&amp;#47;id&amp;gt;&lt;br /&gt;
      &lt;url&gt;http:&amp;#47;&amp;#47;nifty-gui.sourceforge.net&amp;#47;nifty-maven-repo&amp;lt;&amp;#47;url&amp;gt;&lt;br /&gt;
    &amp;lt;&amp;#47;repository&amp;gt;&lt;br /&gt;
  &amp;lt;&amp;#47;repositories&amp;gt;&amp;lt;&amp;#47;pre&amp;gt;
&lt;p&gt;and upgrade your dependency to 1.3.3:&lt;/p&gt;
&lt;pre class=&quot;brush:xml&quot;&gt;    &lt;dependency&gt;&lt;br /&gt;
      &lt;groupid&gt;lessvoid&amp;lt;&amp;#47;groupId&amp;gt;&lt;br /&gt;
      &lt;artifactid&gt;nifty&amp;lt;&amp;#47;artifactId&amp;gt;&lt;br /&gt;
      &lt;version&gt;1.3.3&amp;lt;&amp;#47;version&amp;gt;&lt;br /&gt;
    &amp;lt;&amp;#47;dependency&amp;gt;&amp;lt;&amp;#47;pre&amp;gt;
&lt;p&gt;Have a lot of fun with Nifty 1.3.3! The best Nifty since Nifty ;-)&lt;br /&gt;
void&lt;/p&gt;
&lt;/version&gt;&lt;/artifactid&gt;&lt;/groupid&gt;&lt;/dependency&gt;&lt;/pre&gt;&lt;/url&gt;&lt;/id&gt;&lt;/repository&gt;&lt;/repositories&gt;&lt;/pre&gt;&lt;/a&gt;&lt;/a&gt;&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;&lt;/pre&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/pre&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/pre&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/pre&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/pre&gt;&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/uncategorized/nifty-1-3-3-has-been-released/&quot;&gt;Nifty 1.3.3 has been released&lt;/a&gt; was originally published by  at &lt;a href=&quot;&quot;&gt;Nifty GUI&lt;/a&gt; on June 22, 2013.&lt;/p&gt;</content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Inside Niftys RenderDevice and how to speed it up (Part 2&#47;2)]]></title>
  <link rel="alternate" type="text/html" href="/design/inside-niftys-renderdevice-and-how-to-speed-it-up-part-22/" />
  <id>/design/inside-niftys-renderdevice-and-how-to-speed-it-up-part-22</id>
  <published>2013-04-01T10:17:19+02:00</published>
  <updated>2013-04-01T10:17:19+02:00</updated>
  <author>
    <name></name>
    <uri></uri>
    
  </author>
  <content type="html">&lt;p&gt;Welcome back to the second part of this two part mini series. Today we&#39;ll speed up the Nifty rendering process. So fasten your seat belts - it will be a long and rough ride! :)&lt;/p&gt;
&lt;p&gt;In the &lt;a href=&quot;http:&amp;#47;&amp;#47;nifty-gui.lessvoid.com&amp;#47;archives&amp;#47;505&quot;&gt;first part&amp;lt;&amp;#47;a&amp;gt; we&#39;ve identified several problems that we&#39;d like to fix today:
&lt;ul&gt;
&lt;li&gt;primitive&amp;#47;polygon submission is not optimal and requires way too many GL calls&amp;lt;&amp;#47;li&amp;gt;
&lt;li&gt;we switch GL state very often, especially enabling&amp;#47;disabling texturing while rendering and switching the current texture costs performance&amp;lt;&amp;#47;li&amp;gt;
&lt;li&gt;we enable&amp;#47;disable and change the clipping rectangle very often (eventually)&amp;lt;&amp;#47;li&amp;gt;
&lt;li&gt;we change other states like the blend mode. Not a lot but it is still happening if you ask for it within your screen (f.i. using some effect)&amp;lt;&amp;#47;li&amp;gt;&lt;br /&gt;
&amp;lt;&amp;#47;ul&amp;gt;
&lt;p&gt;So let&#39;s tackle these issues one at a time.&lt;br /&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;a id=&quot;more-530&quot;&gt;&lt;/a&gt;&lt;br /&gt;
I won&#39;t go into the specific OpenGL methods too much and will concentrate more on the &quot;Nifty&quot; side of things. You can read up the OpenGL calls &lt;a href=&quot;http:&amp;#47;&amp;#47;www.opengl.org&amp;#47;sdk&amp;#47;docs&amp;#47;man3&amp;#47;&quot;&gt;elsewhere&amp;lt;&amp;#47;a&amp;gt;. But the interesting part - at least for me and I hope for you as well - is to connect all the dots and combine the individual pieces to optimize Nifty.
&lt;p&gt;So without further ado let&#39;s rock.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Optimize polygon submission&amp;lt;&amp;#47;strong&amp;gt;&amp;lt;&amp;#47;em&amp;gt;
&lt;p&gt;Well, that one is a no brainer since vertex arrays have been a part of the OpenGL spec since the very early OpenGL 1.1 days (1995 or so). The idea is to put all of your vertex data into an array and then give OpenGL a pointer to that array and tell it in a single call: now go and render all of them. Since I&#39;d like to keep the current LWJGL renderer compatible with legacy OpenGL (for now, be patient ^^) I&#39;ve used plain old client-side vertex arrays. This means that all of the vertex data is stored on the CPU and is only send to the GPU for rendering. This allows us to take advantage of the GL_QUADS rendering mode (which has been optimized away from core profile unfortunatly).&lt;/p&gt;
&lt;p&gt;So for each Nifty &lt;a href=&quot;https:&amp;#47;&amp;#47;github.com&amp;#47;void256&amp;#47;nifty-gui&amp;#47;blob&amp;#47;1.3&amp;#47;nifty-core&amp;#47;src&amp;#47;main&amp;#47;java&amp;#47;de&amp;#47;lessvoid&amp;#47;nifty&amp;#47;spi&amp;#47;render&amp;#47;RenderDevice.java&quot;&gt;RenderDevice&amp;lt;&amp;#47;a&amp;gt; render*() method (renderQuad() or renderImage()) we add four vertices to the vertex buffer representing a single quad. When Nifty later calls the endFrame() method we render all of the quads with a single glDrawElements(GL_QUADS) call. This way we can remove a couple of hundred individual glBegin()&amp;#47;glEnd()&amp;#47;glVertex() calls and GL can now take our buffer, process it in one step and render it! Much faster!
&lt;p&gt;Great! We&#39;re done! Woohoo!&lt;/p&gt;
&lt;p&gt;But wait, what do you say? We&#39;re not finished yet? What&#39;s with all of the texturing and what is with font rendering? And what if we want to render a single colored untextured quad like a Nifty panel with a plain backgroundColor? Wouldn&#39;t we have to disable texturing somehow in between all those quads in the vertex array?&lt;/p&gt;
&lt;p&gt;Of course you&#39;re right - readers are always right ;) So let&#39;s continue.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Disable texturing while rendering with a vertex array&amp;lt;&amp;#47;strong&amp;gt;
&lt;p&gt;If we would enable&amp;#47;disable texturing all the time or switch the current texture while we&#39;re rendering our quads we would end up with individual render calls again. In the end all of our performance gains would have been lost again. So what should we do?&lt;/p&gt;
&lt;p&gt;Our first trick is to let texturing enabled all the time. We&#39;ll simply submit textured quads only - all the time. To render a plain colored quad we&#39;ll reserve some pixels of a plain solid color in our texture, let&#39;s say white. If we then render a quad with texture coordinates of this white piece of the texture we would end up with a solid white quad - and this quad could really be any size we want since it doesn&#39;t really matter if we would stretch a single white pixel to the size of the screen. It would still be white :)&lt;/p&gt;
&lt;p&gt;So that&#39;s great. We can render white colored quads. Yeah! But what about other colors? Ok, that&#39;s easy as well. We attach vertex colors to our vertices. To render a plain colored red quad for instance, we&#39;ll set the vertex color of each vertex to red and in the end we&#39;d have a red quad instead of a white one. And btw. this allows us to add support for linear gradients as well when we use different colors.&lt;/p&gt;
&lt;p&gt;So to summarize our vertex data, here are the components we store per vertex in our array:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The position of the vertex. At the moment we&#39;re only 2d so two floats should be appropriate (x and y coordinates)&amp;lt;&amp;#47;li&amp;gt;
&lt;li&gt;The texture coordinate for the vertex (u and v, 2 floats as well)&amp;lt;&amp;#47;li&amp;gt;
&lt;li&gt;A color for the vertex. That will add 4 more floats.&amp;lt;&amp;#47;li&amp;gt;&lt;br /&gt;
&amp;lt;&amp;#47;ul&amp;gt;
&lt;p&gt;So there is no need to disable texturing at all! If we want to render a plain colored quad we&#39;ll simply adjust the texture coordinates of that quad in our vertex array to match up with the plain colored area in our texture.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Switch the current texture while rendering with a vertex array&amp;lt;&amp;#47;strong&amp;gt;
&lt;p&gt;Finally we&#39;ll need a way to render different textures. The solution to this is simple in theory but was a bit more involved in the end.&lt;/p&gt;
&lt;p&gt;The idea is to combine all of our individual images into one big texture. The name for this optimization technique is &quot;texture atlas&quot; or &quot;texture packing&quot;. In most cases you would combine your textures into a bigger one as a pre-process using some custom tool. But for Nifty we&#39;ll need to do that dynamically. Let&#39;s enter the world of texture packing algorithms also known as bin packing.&lt;/p&gt;
&lt;p&gt;Well, as it appears this topic is a huge one! There are even PhD Thesis discussing this in depth (The PhD Thesis of Andrea Lodi f.i.: &lt;a href=&quot;http:&amp;#47;&amp;#47;citeseerx.ist.psu.edu&amp;#47;viewdoc&amp;#47;download?doi=10.1.1.98.3502&amp;amp;rep=rep1&amp;amp;type=pdf&quot;&gt;Algorithms for Two Dimensional Bin Packing and Assignment Problems&amp;lt;&amp;#47;a&amp;gt;).
&lt;p&gt;One of the more simple algorithms and the one we&#39;ll use for now is the &lt;a href=&quot;http:&amp;#47;&amp;#47;www.blackpawn.com&amp;#47;texts&amp;#47;lightmaps&amp;#47;default.html&quot;&gt;Lightmap Packing Algorithm&amp;lt;&amp;#47;a&amp;gt; by &lt;a href=&quot;http:&amp;#47;&amp;#47;www.blackpawn.com&amp;#47;&quot;&gt;Black Pawn&amp;lt;&amp;#47;a&amp;gt; and the &lt;a href=&quot;https:&amp;#47;&amp;#47;github.com&amp;#47;lukaszdk&amp;#47;texture-atlas-generator&quot;&gt;Java port&amp;lt;&amp;#47;a&amp;gt; of this algorithm done by &lt;a href=&quot;https:&amp;#47;&amp;#47;github.com&amp;#47;lukaszdk&amp;#47;texture-atlas-generator&quot;&gt;lukaszdk&amp;lt;&amp;#47;a&amp;gt;.
&lt;p&gt;The Java version of the &lt;a href=&quot;https:&amp;#47;&amp;#47;github.com&amp;#47;lukaszdk&amp;#47;texture-atlas-generator&quot;&gt;Texture Atlas Generator&amp;lt;&amp;#47;a&amp;gt; is meant to be used as an executable jar that combines multiple textures into a bigger one using java.awt.image.* stuff. Not bad but for Nifty we&#39;d like to do that on the fly and we&#39;d like to separate the actual algorithm from the actual handling of the graphics. In the end the algorithm can work independently of the actual graphics data. So we&#39;ve modified his code a bit. If you&#39;re interested in the details you can find our version in the &lt;a href=&quot;https:&amp;#47;&amp;#47;github.com&amp;#47;void256&amp;#47;nifty-gui&amp;#47;blob&amp;#47;1.3&amp;#47;nifty-core&amp;#47;src&amp;#47;main&amp;#47;java&amp;#47;de&amp;#47;lessvoid&amp;#47;nifty&amp;#47;batch&amp;#47;TextureAtlasGenerator.java&quot;&gt;TextureAtlasGenerator&amp;lt;&amp;#47;a&amp;gt; class. This class can be used on its own since it is self contained and doesn&#39;t need any Nifty dependencies at all - if you ever need a similar algorithm ;)
&lt;p&gt;So we&#39;ll start with a big texture (something like 2048x2048 pixels works very well so far) and as Nifty loads images we&#39;ll put them into this texture at positions the TextureAtlasGenerator calculates for us. And with that in place switching textures actually only means changing the texture coordinates according to the data that the TextureAtlasGenerator has generated. And voila we can keep rendering all of our quads in a single call using the same big texture! :D&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Managing image resources&amp;lt;&amp;#47;strong&amp;gt;
&lt;p&gt;The texture atlas will be filled with images for the current Nifty screen. This way all images used will be part of the texture atlas. To do that Nifty keeps track of which image belongs to which screen when it reads a XML file or when a screen is created with the Builder pattern. This tracking is done for all loaded screens and even for images that are dynamically created with Nifty.createImage().&lt;/p&gt;
&lt;p&gt;In general Nifty will make sure that it uploads all images that are required for a screen when the screen is started (and gets active). Consequently when a screen ends the texture atlas is being reset to an empty one.&lt;/p&gt;
&lt;p&gt;Nifty already implemented a reference counting mechanism to keep track of loaded images. This was used to prevent loading the same image multiple times and it is still being used for this purpose. However, the process of loading an image is now separated into two steps:&lt;/p&gt;
&lt;p&gt;1. the actual image data is loaded into whatever image representation an implementation supports (for instance the implementation using native LWJGL will simply load an image file into a ByteBuffer) and&lt;/p&gt;
&lt;p&gt;2. the loaded image data is put into the texture atlas at a position that Nifty decided when it&#39;s time for this image to be a part of the current screens texture atlas.&lt;/p&gt;
&lt;p&gt;When an image is accessed dynamically while a screen is running it will be uploaded at the time of the first access. For best performance static images - or at least ones that Nifty knows about before the screen is started - should be preferred so that Nifty can upload them to the texture atlas at the time the screen starts and not while the screen is already running. Although I think you can get away with a couple of image uploads if you don&#39;t access too many new images at once.&lt;/p&gt;
&lt;p&gt;All of this is required to keep only the currently active images in the texture atlas. This should work quite well for most use cases. However, it&#39;s still possible to use up all of the available space in the texture atlas. In that case Nifty will complain in the log but there will be missing images. All of the Nifty examples run well with a 2K (2048x2048) texture so far. The batch renderer provides a better rendering performance but you might want to plan for some additional tests to check if all of your images fit into the texture.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Clipping&amp;lt;&amp;#47;strong&amp;gt;
&lt;p&gt;Nifty allows you to clip child elements to the area of it&#39;s parent element. This way only the part that intersects with the parent element will be displayed. The original Nifty renderer used glScissor() for this prior to rendering the child elements. The problem with this approach is that we can&#39;t change the size of the scissor box while rendering with vertex arrays. So what should we do?&lt;/p&gt;
&lt;p&gt;Well, clipping is a somewhat simple 2d operation so we simply clip on the CPU now! The quads we will send into the vertex array will already be clipped so we don&#39;t have to change the scissor state while we&#39;re rendering :)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Blending&amp;lt;&amp;#47;strong&amp;gt;
&lt;p&gt;Nifty renders everything with usual alpha transparency blending (glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA)) but it can be changed to Multiply (glBlendFunc(GL_DST_COLOR, GL_ZERO)) if necessary for rendering special effects. However, for the optimized renderer this is a slight problem since we can&#39;t change the blending mode while rendering a vertex array. What Nifty will do now is to create a new batch when the blending mode changes. Since the Multiply blending mode is currently the only &quot;other&quot; blend mode supported and this is rarely used we&#39;ll get away with the new batch approach. Rendering a couple of batches per frame is still a lot better than rendering hundreds of individual quads with hundreds of draw calls.&lt;/p&gt;
&lt;p&gt;So with blending out of the way we&#39;ve actually solved all of the problems we set out to fix! :D&lt;/p&gt;
&lt;p&gt;The only thing we have to discuss is how all of this has been implemented.&lt;/p&gt;
&lt;p&gt;Usually this is done by each rendering system individually like a LWJGL, JOGL or JME3 batched renderer implementation. However each of these individual implementations would solve the exact same problems outlined above. All of the batching, texture atlas management and so on. Not a very nifty solution.&lt;/p&gt;
&lt;p&gt;A better approach would be to solve the managment of the batches once and then use a simplified implementation for the native implementations. And that&#39;s exactly what we did :D&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Unified batched RenderDevice implementation!&amp;lt;&amp;#47;strong&amp;gt;
&lt;p&gt;Nifty 1.3.3 will provide a default implementation of the RenderDevice interface. The &lt;a href=&quot;https:&amp;#47;&amp;#47;github.com&amp;#47;void256&amp;#47;nifty-gui&amp;#47;blob&amp;#47;1.3&amp;#47;nifty-core&amp;#47;src&amp;#47;main&amp;#47;java&amp;#47;de&amp;#47;lessvoid&amp;#47;nifty&amp;#47;batch&amp;#47;BatchRenderDevice.java&quot;&gt;de.lessvoid.nifty.batch.BatchRenderDevice&amp;lt;&amp;#47;a&amp;gt; handles all of things we&#39;ve mentioned so far including all of the texture packing logic and so on.
&lt;p&gt;Of course there is still the need for specific implementations to connect all of this to LWJGL, JOGL or jME. But these implementations are now much simpler since they don&#39;t have to handle all of the details the original RenderDevice has to. The &lt;a href=&quot;https:&amp;#47;&amp;#47;github.com&amp;#47;void256&amp;#47;nifty-gui&amp;#47;blob&amp;#47;1.3&amp;#47;nifty-core&amp;#47;src&amp;#47;main&amp;#47;java&amp;#47;de&amp;#47;lessvoid&amp;#47;nifty&amp;#47;batch&amp;#47;spi&amp;#47;BatchRenderBackend.java&quot;&gt;de.lessvoid.nifty.batch.spi.BatchRenderBackend&amp;lt;&amp;#47;a&amp;gt; SPI is much simpler. The BatchRenderBackend will receive quads that it should buffer in whatever way it sees fit. The LWJGL implementation fills a vertex array exactly as we&#39;ve described above. Handling the texture atlas is reduced to creating a texture and replacing subtextures.
&lt;p&gt;Rendering fonts is also handled inside the BatchRenderDevice which means the BatchRenderBackend doesn&#39;t have to implement that. Font rendering is reduced to rendering quads as well and the font texture is simply treated as another part of the texture atlas. This has the additional benefit that font rendering looks the same no matter what rendering system you use because things like kerning, text string width calculations and so on are all happening inside of Nifty now :)&lt;/p&gt;
&lt;p&gt;But wait, there is even more!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bonus: LWJGL OpenGL Core Profile implementation&amp;lt;&amp;#47;strong&amp;gt;
&lt;p&gt;Until this point you could not really use Nifty with modern OpenGL because the original LWJGL implementation didn&#39;t support it. With the new BatchRenderDevice a full OpenGL Core Profile implementation is now available! :D&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Shut up and &lt;del datetime=&quot;2013-04-01T08:09:45+00:00&quot;&gt;take my money&amp;lt;&amp;#47;del&amp;gt; show me how to use it&amp;lt;&amp;#47;strong&amp;gt;
&lt;p&gt;Usage of the batched renderer is very easy. In place of your usual RenderDevice implementation you use the BatchRendererDevice when you instantiante Nifty:&lt;/p&gt;
&lt;pre class=&quot;brush:java&quot;&gt;BatchRenderDevice renderDevice = new BatchRenderDevice(&lt;br /&gt;
    put-in-batched-renderer-backend-here, &amp;#47;&amp;#47; BatchRenderBackend impl&lt;br /&gt;
    2048, &amp;#47;&amp;#47; width of texture atlas&lt;br /&gt;
    2048); &amp;#47;&amp;#47; height of texture atlas&amp;lt;&amp;#47;pre&amp;gt;
&lt;p&gt;The first parameter is an implementation of the &lt;a href=&quot;https:&amp;#47;&amp;#47;github.com&amp;#47;void256&amp;#47;nifty-gui&amp;#47;blob&amp;#47;1.3&amp;#47;nifty-core&amp;#47;src&amp;#47;main&amp;#47;java&amp;#47;de&amp;#47;lessvoid&amp;#47;nifty&amp;#47;batch&amp;#47;spi&amp;#47;BatchRenderBackend.java&quot;&gt;de.lessvoid.nifty.batch.spi.BatchRenderBackend&amp;lt;&amp;#47;a&amp;gt; interface that connects the batched renderer to a specific OpenGL implementation. Currently the following implementations exist:
&lt;ul&gt;
&lt;li&gt;LWJGL legacy batched renderer: &lt;a href=&quot;https:&amp;#47;&amp;#47;github.com&amp;#47;void256&amp;#47;nifty-gui&amp;#47;blob&amp;#47;1.3&amp;#47;nifty-renderer-lwjgl&amp;#47;src&amp;#47;main&amp;#47;java&amp;#47;de&amp;#47;lessvoid&amp;#47;nifty&amp;#47;renderer&amp;#47;lwjgl&amp;#47;render&amp;#47;batch&amp;#47;LwjglBatchRenderBackend.java&quot;&gt;de.lessvoid.nifty.renderer.lwjgl.render.batch.LwjglBatchRenderBackend&amp;lt;&amp;#47;a&amp;gt;&amp;lt;&amp;#47;li&amp;gt;
&lt;li&gt;LWJGL core profile batched renderer: &lt;a href=&quot;https:&amp;#47;&amp;#47;github.com&amp;#47;void256&amp;#47;nifty-gui&amp;#47;blob&amp;#47;1.3&amp;#47;nifty-renderer-lwjgl&amp;#47;src&amp;#47;main&amp;#47;java&amp;#47;de&amp;#47;lessvoid&amp;#47;nifty&amp;#47;renderer&amp;#47;lwjgl&amp;#47;render&amp;#47;batch&amp;#47;LwjglBatchRenderBackendCoreProfile.java&quot;&gt;de.lessvoid.nifty.renderer.lwjgl.render.batch.LwjglBatchRenderBackendCoreProfile&amp;lt;&amp;#47;a&amp;gt;&amp;lt;&amp;#47;li&amp;gt;
&lt;li&gt;jme3 batched renderer implementation: &lt;a href=&quot;http:&amp;#47;&amp;#47;code.google.com&amp;#47;p&amp;#47;jmonkeyengine&amp;#47;source&amp;#47;browse&amp;#47;trunk&amp;#47;engine&amp;#47;src&amp;#47;niftygui&amp;#47;com&amp;#47;jme3&amp;#47;niftygui&amp;#47;JmeBatchRenderBackend.java&quot;&gt;com.jme3.niftygui.JmeBatchRenderBackend&amp;lt;&amp;#47;a&amp;gt;&amp;lt;&amp;#47;li&amp;gt;&lt;br /&gt;
&amp;lt;&amp;#47;ul&amp;gt;
&lt;p&gt;You&#39;ll need to use Nifty 1.3.3 or Nifty 1.4 nightly builds to have these new implementations available. For jme3 you&#39;ll need a nightly build as well.&lt;/p&gt;
&lt;p&gt;Besides the BatchRendererBackend implementation you&#39;ll need to provide the size of the texture atlas as parameters. As mentioned above a 2k texture was enough to run all of Niftys standard examples.&lt;/p&gt;
&lt;p&gt;So, that&#39;s all there is!&lt;/p&gt;
&lt;p&gt;If you made it through this huge post. Congratulations! You now know all the things that took me a couple of months to figure out :)&lt;/p&gt;
&lt;p&gt;I hope you&#39;ve enjoyed this in-depth explanation a bit!&lt;/p&gt;
&lt;p&gt;See you next time!&lt;/p&gt;
&lt;p&gt;void&lt;/p&gt;
&lt;/a&gt;&lt;/li&gt;&lt;/a&gt;&lt;/li&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/a&gt;&lt;/p&gt;&lt;/pre&gt;&lt;/del&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/a&gt;&lt;/p&gt;&lt;/a&gt;&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;&lt;/a&gt;&lt;/a&gt;&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;&lt;/a&gt;&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;/li&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/a&gt;&lt;/p&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/li&gt;&lt;/li&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/design/inside-niftys-renderdevice-and-how-to-speed-it-up-part-22/&quot;&gt;Inside Niftys RenderDevice and how to speed it up (Part 2&#47;2)&lt;/a&gt; was originally published by  at &lt;a href=&quot;&quot;&gt;Nifty GUI&lt;/a&gt; on April 01, 2013.&lt;/p&gt;</content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Correctly configure jdk14-logging (guest blog post by Ben)]]></title>
  <link rel="alternate" type="text/html" href="/uncategorized/correctly-configure-jdk14-logging-guest-blog-post-by-ben/" />
  <id>/uncategorized/correctly-configure-jdk14-logging-guest-blog-post-by-ben</id>
  <published>2013-03-16T01:33:28+01:00</published>
  <updated>2013-03-16T01:33:28+01:00</updated>
  <author>
    <name></name>
    <uri></uri>
    
  </author>
  <content type="html">&lt;p&gt;After being puzzled for a while why he wasn&#39;t able to configure logging in jME-Nifty properly Ben (&quot;ben dot foxmoore at gmail dot com&quot;) set aside some time to figure it out. He was kind enough to share his findings with us in this guest blog post :)&lt;/p&gt;
&lt;p&gt;So here is Ben explaining a proper way to configure Nifty logging:&lt;/p&gt;
&lt;p&gt;It seems that most people who have issues with Nifty&#39;s logs want to cut down on the number shown, but I, on the other hand, wanted to see more. Unfortunately, setting the global logging level to Info caused JME3 to also log lots of information that wasn&#39;t relevant to the problem at hand. I attempted a quick fix using the following code:&lt;/p&gt;
&lt;pre class=&quot;brush:java&quot;&gt;public static void main(String[] args) {&lt;br /&gt;
        Logger.getLogger(&quot;&quot;).setLevel(Level.WARNING);&lt;br /&gt;
        Logger.getLogger(&quot;de.lessvoid.nifty&quot;).setLevel(Level.INFO);&lt;br /&gt;
        SimpleApplication app = new SimpleApplication() {&lt;br /&gt;
            public void simpleInitApp() {&lt;br /&gt;
                NiftyJmeDisplay niftyDisplay = new NiftyJmeDisplay(&lt;br /&gt;
                     assetManager, inputManager, audioRenderer, guiViewPort);&lt;br /&gt;
                Nifty nifty = niftyDisplay.getNifty();&lt;br /&gt;
                nifty.loadStyleFile(&quot;nifty-default-styles.xml&quot;);&lt;br /&gt;
                nifty.loadControlFile(&quot;nifty-default-controls.xml&quot;);&lt;br /&gt;
                guiViewPort.addProcessor(niftyDisplay);&lt;br /&gt;
            }&lt;br /&gt;
        };&lt;br /&gt;
        app.start();&lt;br /&gt;
    }&amp;lt;&amp;#47;pre&amp;gt;
&lt;p&gt;However, you&#39;ll quickly realise that this doesn&#39;t actually cause Nifty to display any extra logs. After many hours trying to work out why, I discovered that it&#39;s all down to an intricacy in the way LogManager keeps track of the Loggers in your program. LogManager only keeps a weakReference to each Logger, allowing any that are no longer being used to be garbage collected. Because of this, in the time between line 3 and line 6, the JRE garbage collects the original &quot;de.lessvoid.nifty&quot; Logger created at line 3. When the &quot;de.lessvoid.nifty.Nifty&quot; Logger is retrieved in the Nifty constructor (called by the NiftyJmeDisplay constructor at line 6), a new one is created and it inherits its Level from the rootLogger, which is set to Warning at line 2. (The LogManager keeps a strong reference to the rootLogger so it is never garbage collected.)&lt;/p&gt;
&lt;p&gt;A quick (but not very nifty) solution to this problem is to just keep a static (strong) reference to the &quot;de.lessvoid.nifty&quot; Logger in your class, as such:&lt;/p&gt;
&lt;pre class=&quot;brush:java&quot;&gt;    private static Logger logger;
&lt;p&gt;    public static void main(String[] args) {&lt;br /&gt;
        Logger.getLogger(&quot;&quot;).setLevel(Level.WARNING);&lt;br /&gt;
        logger = Logger.getLogger(&quot;de.lessvoid.nifty&quot;);&lt;br /&gt;
        logger.setLevel(Level.INFO);&lt;br /&gt;
        SimpleApplication app = new SimpleApplication() {&lt;br /&gt;
            public void simpleInitApp() {&lt;br /&gt;
                ...&lt;br /&gt;
            }&lt;br /&gt;
        };&lt;br /&gt;
        app.start();&lt;br /&gt;
    }&amp;lt;&amp;#47;pre&amp;gt;&lt;/p&gt;
&lt;p&gt;Ultimately though, the niftiest solution to this problem is to use a custom properties file which specifies to the LogManager how to initialize all of the Loggers. The following &quot;logging.properties&quot; file will initialize the Logging system in the same way as the code above:&lt;/p&gt;
&lt;pre class=&quot;brush:java&quot;&gt;handlers=java.util.logging.ConsoleHandler&lt;br /&gt;
.level=WARNING&lt;br /&gt;
de.lessvoid.nifty.level=INFO&amp;lt;&amp;#47;pre&amp;gt;
&lt;p&gt;There are two ways to tell the LogManager to use this file. Either use the&lt;/p&gt;
&lt;pre class=&quot;brush:java&quot;&gt;&quot;-Djava.util.logging.config.file=pathToLogging.properties&quot;&amp;lt;&amp;#47;pre&amp;gt;
&lt;p&gt;flag when running your program, or, alternatively, use the following code:&lt;/p&gt;
&lt;pre class=&quot;brush:java&quot;&gt;    public static void main(String[] args) throws Exception {&lt;br /&gt;
        InputStream inputStream =&lt;br /&gt;
             ClassLoader.getSystemResourceAsStream(&quot;logging.properties&quot;);&lt;br /&gt;
        LogManager.getLogManager().readConfiguration(inputStream);&lt;br /&gt;
        SimpleApplication app = new SimpleApplication() {&lt;br /&gt;
            public void simpleInitApp() {&lt;br /&gt;
                ...&lt;br /&gt;
            }&lt;br /&gt;
        };&lt;br /&gt;
        app.start();&lt;br /&gt;
    }&amp;lt;&amp;#47;pre&amp;gt;
&lt;p&gt;Hopefully this should help anyone who comes across the same issue that I did!&lt;/p&gt;
&lt;p&gt;(As a small side note, there is one final alternative: LogManager can also use the &quot;java.util.logging.config.class&quot; property. If present, the given class will be loaded, an object will be instantiated, and that object&#39;s constructor is responsible for providing the initial configuration as an InputStream, just as above.)&lt;/p&gt;
&lt;p&gt;So that&#39;s it! Finally you can configure logging correctly! THANKS A LOT BEN! :D&lt;/p&gt;
&lt;p&gt;void&lt;/p&gt;
&lt;p&gt;PS: Nifty 1.3.3 and Nifty 1.4 have already been configured to log less by default. So most people should now be more happy with the new defaults. But if you really need the logging to debug an issue you now can do it properly - thanks to Ben :)&lt;/p&gt;
&lt;/pre&gt;&lt;/pre&gt;&lt;/pre&gt;&lt;/pre&gt;&lt;/pre&gt;

  &lt;p&gt;&lt;a href=&quot;/uncategorized/correctly-configure-jdk14-logging-guest-blog-post-by-ben/&quot;&gt;Correctly configure jdk14-logging (guest blog post by Ben)&lt;/a&gt; was originally published by  at &lt;a href=&quot;&quot;&gt;Nifty GUI&lt;/a&gt; on March 16, 2013.&lt;/p&gt;</content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Inside Niftys RenderDevice and how to speed it up (Part 1&#47;2)]]></title>
  <link rel="alternate" type="text/html" href="/design/inside-niftys-renderdevice-and-how-to-speed-it-up-part-12/" />
  <id>/design/inside-niftys-renderdevice-and-how-to-speed-it-up-part-12</id>
  <published>2013-03-10T19:32:13+01:00</published>
  <updated>2013-03-10T19:32:13+01:00</updated>
  <author>
    <name></name>
    <uri></uri>
    
  </author>
  <content type="html">&lt;p&gt;When I started Nifty my mindset was like, &quot;well, games can render millions of polys each frame so throwing a couple of hundred textured polys at the GPU shouldn&#39;t hurt performance that much&quot;.&lt;/p&gt;
&lt;p&gt;Well, I was wrong.&lt;/p&gt;
&lt;p&gt;To achieve a somewhat high performance you still have to play by the GPU rules. Simply throwing polys at the GPU and expect the best rendering performance doesn&#39;t really work. In this two part series of blog posts I&#39;ll try to explain what basically sucks in the current way we render things and what we&#39;ve done in the last couple of months to achieve better rendering performance.&lt;/p&gt;
&lt;p&gt;There is of course always room for more improvement. One thing I&#39;d like to tackle in the future and especially in Nifty 2.0 would be to render only the parts of a scene that have changed. Since the best performance you can ever get is not to render :) But since this is a bit more involved for now we&#39;re stuck with the &quot;render the whole GUI each frame&quot; approach of current generation Nifty. BUT at least we can make Nifty render fast. Very fast.&lt;br /&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;a id=&quot;more-505&quot;&gt;&lt;/a&gt;&lt;br /&gt;
So here we go. A trip down the current way how Nifty renders its GUI and how we can try to be a bit smart to optimize it a lot. In this first part we&#39;ll look at the way the current renderer works and how bad some of the decisions have been according to rendering performance. In the second part of this two part series we&#39;ll look at the way we can make everything better and speed it up.&lt;/p&gt;
&lt;p&gt;When it comes to rendering Nifty only knows three somewhat high level primitives:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;render a quad in a single color or with different colors at each vertex (for gradient support)&amp;lt;&amp;#47;li&amp;gt;
&lt;li&gt;render a textured image&amp;lt;&amp;#47;li&amp;gt;
&lt;li&gt;render text with a given font&amp;lt;&amp;#47;li&amp;gt;&lt;br /&gt;
&amp;lt;&amp;#47;ul&amp;gt;
&lt;p&gt;So all of the elements on your Nifty screen and all effects you apply to them will end up as a number of colored quads, textured images or text renderings.&lt;/p&gt;
&lt;p&gt;To actually perform all of this Nifty provides some &lt;a href=&quot;http:&amp;#47;&amp;#47;en.wikipedia.org&amp;#47;wiki&amp;#47;Service_provider_interface&quot;&gt;SPI&amp;lt;&amp;#47;a&amp;gt; in the &lt;a href=&quot;https:&amp;#47;&amp;#47;github.com&amp;#47;void256&amp;#47;nifty-gui&amp;#47;tree&amp;#47;1.3&amp;#47;nifty-core&amp;#47;src&amp;#47;main&amp;#47;java&amp;#47;de&amp;#47;lessvoid&amp;#47;nifty&amp;#47;spi&amp;#47;render&quot;&gt;de.lessvoid.nifty.spi.render&amp;lt;&amp;#47;a&amp;gt; package. If you implement the four simple interfaces for the rendering system of your choice you&#39;re done and Nifty can be used with your rendering system. Nifty provides native LWJGL, JOGL, jME3, Slick2D and even Java2D adapter implementations already.
&lt;p&gt;So let&#39;s take a look at the main interface of the SPI the &lt;a href=&quot;https:&amp;#47;&amp;#47;github.com&amp;#47;void256&amp;#47;nifty-gui&amp;#47;blob&amp;#47;1.3&amp;#47;nifty-core&amp;#47;src&amp;#47;main&amp;#47;java&amp;#47;de&amp;#47;lessvoid&amp;#47;nifty&amp;#47;spi&amp;#47;render&amp;#47;RenderDevice.java&quot;&gt;de.lessvoid.nifty.spi.render.RenderDevice&amp;lt;&amp;#47;a&amp;gt;. There are methods to load images and fonts and methods to let Nifty request the size of the screen. Other methods let the implementation know when a render frame begins and when it ends. However, the core of the RenderDevice interface are a couple of methods to render colored quads, images and text.
&lt;p&gt;The render*() methods contain almost all the state that is required to perform the render directly as method parameters. Things like where to render the quad on the screen and which width, height and color to use are given as parameters.&lt;/p&gt;
&lt;p&gt;Besides those parameters there are two additional states that can be modified by Nifty in calling RenderDevice methods which are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the current blendmode - that defines how blending should be configured prior to rendering elements&amp;lt;&amp;#47;li&amp;gt;
&lt;li&gt;enable or disable clipping - to restrict rendering to a certain rectangle on the screen. Everything outside this clipping rectangle will not be rendered.&amp;lt;&amp;#47;li&amp;gt;&lt;br /&gt;
&amp;lt;&amp;#47;ul&amp;gt;
&lt;p&gt;So Nifty calls beginFrame() and then repeats for everything it needs to render: set the state (clipping and blending) and then calls renderQuad(), renderImage() or renderFont() and finally it calls endFrame(). In each render*() call the implementation will now ensure that the correct textures are set or that texturing is disabled, to render plain colored quads. In case of font rendering the correct bitmap font texture needs to be selected so that the text can be rendered properly and so on.&lt;/p&gt;
&lt;p&gt;And here is the main issue in the naive implementations that have been used so far especially in the LWJGL renderer. Changing state costs performance since each state switch results in quite a lot of processing on it&#39;s way through all the different layers involved on the way to the GPU. There are driver calls, OS calls, state checks, command queues and so on to finally set the GPU in the state we need to render our triangles. If you&#39;re interessted in all of the details there is a great series of blogs available by Fabian Giesen called &lt;a href=&quot;http:&amp;#47;&amp;#47;fgiesen.wordpress.com&amp;#47;2011&amp;#47;07&amp;#47;09&amp;#47;a-trip-through-the-graphics-pipeline-2011-index&amp;#47;&quot;&gt;A trip through the Graphics Pipeline 2011&amp;lt;&amp;#47;a&amp;gt;.
&lt;p&gt;So the first issue the current way Nifty renders stuff is that we change state quite a lot each frame. If we need to render a single colored untextured quad we&#39;ll need to disable texturing. If we need to render a certain image next, we&#39;ll need to enable texturing again and make sure the texture of the image we need to render is enabled. The same happens to clipping and blending which need to be enabled or disabled as well. So we&#39;re constantly changing state which, well, hurts performance.&lt;/p&gt;
&lt;p&gt;A second issue that is especially apparent in the native LWJGL renderer is the way the actual vertex data is submitted to the GPU. When submitting data to OpenGL the classic (and very old way) to submit vertex data has been used: the immediate mode. Which means each vertex is send with multiple OpenGL calls. Here is an example:&lt;/p&gt;
&lt;pre class=&quot;brush:java&quot;&gt;&amp;#47;&amp;#47; code to render a single quad with vertex color - DON&#39;T DO THAT!&lt;br /&gt;
  GL11.glBegin(GL11.GL_QUADS);&lt;br /&gt;
      GL11.glColor4f(topLeft.getRed(), topLeft.getGreen(), topLeft.getBlue(), topLeft.getAlpha());&lt;br /&gt;
      GL11.glVertex2i(x, y);&lt;br /&gt;
      GL11.glColor4f(topRight.getRed(), topRight.getGreen(), topRight.getBlue(), topRight.getAlpha());&lt;br /&gt;
      GL11.glVertex2i(x + width, y);&lt;br /&gt;
      GL11.glColor4f(bottomRight.getRed(), bottomRight.getGreen(), bottomRight.getBlue(), bottomRight.getAlpha());&lt;br /&gt;
      GL11.glVertex2i(x + width, y + height);&lt;br /&gt;
      GL11.glColor4f(bottomLeft.getRed(), bottomLeft.getGreen(), bottomLeft.getBlue(), bottomLeft.getAlpha());&lt;br /&gt;
      GL11.glVertex2i(x, y + height);&lt;br /&gt;
    GL11.glEnd();&amp;lt;&amp;#47;pre&amp;gt;
&lt;p&gt;That&#39;s really bad. First there are lots of calls to the GL and each of the calls will need to get through the different layers and checks again. This will only be ok if you send very view vertices but as the vertex count increases the overhead of the individual method calls will add up and will hurt performance as well.&lt;/p&gt;
&lt;p&gt;So these are the main issues we&#39;ll need to solve to improve rendering performance:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;reduce state switches&amp;lt;&amp;#47;li&amp;gt;
&lt;li&gt;reduce draw calls to send vertex data&amp;lt;&amp;#47;li&amp;gt;&lt;br /&gt;
&amp;lt;&amp;#47;ul&amp;gt;
&lt;p&gt;The second part of this mini blog series will explain how we solve those two issues by providing a special RenderDevice implementation. Interesting enough this special RenderDevice solves additional issues and makes implementing a new renderer for Nifty more easy as well :)&lt;/p&gt;
&lt;p&gt;Instead of hundreds of glVertex() calls we can render the whole GUI in very few draw calls and most of the time even only in a single one! And all of this with no changes to the rest of Nifty or your code. In most case you&#39;ll be able to use the new special RenderDevice for a performance boost and that&#39;s it. nifty! :)&lt;/p&gt;
&lt;p&gt;Curious? See you on the next blog post!&lt;/p&gt;
&lt;p&gt;void :D&lt;/p&gt;
&lt;/li&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/pre&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/a&gt;&lt;/p&gt;&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/li&gt;&lt;/li&gt;&lt;/ul&gt;

  &lt;p&gt;&lt;a href=&quot;/design/inside-niftys-renderdevice-and-how-to-speed-it-up-part-12/&quot;&gt;Inside Niftys RenderDevice and how to speed it up (Part 1&#47;2)&lt;/a&gt; was originally published by  at &lt;a href=&quot;&quot;&gt;Nifty GUI&lt;/a&gt; on March 10, 2013.&lt;/p&gt;</content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Updated Manual for Nifty GUI 1.3.2 available]]></title>
  <link rel="alternate" type="text/html" href="/docs/updated-manual-for-nifty-gui-1-3-2-available/" />
  <id>/docs/updated-manual-for-nifty-gui-1-3-2-available</id>
  <published>2012-11-12T23:23:01+01:00</published>
  <updated>2012-11-12T23:23:01+01:00</updated>
  <author>
    <name></name>
    <uri></uri>
    
  </author>
  <content type="html">&lt;p&gt;The updated Manual for Nifty GUI 1.3.2 is now available as a sf.net file download: &lt;a href=&quot;http:&amp;#47;&amp;#47;sourceforge.net&amp;#47;projects&amp;#47;nifty-gui&amp;#47;files&amp;#47;nifty-gui&amp;#47;1.3.2&amp;#47;nifty-gui-the-manual-1.3.2.pdf&amp;#47;download&quot;&gt;nifty-gui-the-manual-1.3.2.pdf&amp;lt;&amp;#47;a&amp;gt;
&lt;p&gt;[caption id=&quot;attachment_496&quot; align=&quot;aligncenter&quot; width=&quot;300&quot; caption=&quot;Nifty GUI Manual 1.3.2&quot;]&lt;a href=&quot;http:&amp;#47;&amp;#47;sourceforge.net&amp;#47;projects&amp;#47;nifty-gui&amp;#47;files&amp;#47;nifty-gui&amp;#47;1.3.2&amp;#47;nifty-gui-the-manual-1.3.2.pdf&amp;#47;download&quot;&gt;&amp;lt;img src=&quot;http:&amp;#47;&amp;#47;nifty-gui.lessvoid.com&amp;#47;wp-content&amp;#47;2012&amp;#47;11&amp;#47;Bildschirmfoto-2012-11-12-um-23.04.59-300x211.png&quot; alt=&quot;&quot; title=&quot;Nifty GUI Manual 1.3.2&quot; width=&quot;300&quot; height=&quot;211&quot; class=&quot;size-medium wp-image-496&quot; &amp;#47;&amp;gt;&amp;lt;&amp;#47;a&amp;gt;[&amp;#47;caption]
&lt;p&gt;The changes are marked in the document but here is a summary of everthing that has been added:
&lt;ul&gt;
&lt;li&gt;Grammar and spelling corrections thanks to wezrule&amp;lt;&amp;#47;li&amp;gt;
&lt;li&gt;Get Nifty Version String Feature Description&amp;lt;&amp;#47;li&amp;gt;
&lt;li&gt;(Short) description of imageMode=&quot;subImageDirect:x,y,w,h&quot; Feature&amp;lt;&amp;#47;li&amp;gt;
&lt;li&gt;Padding feature description including lots of examples with screenshots&amp;lt;&amp;#47;li&amp;gt;
&lt;li&gt;Margin feature description&amp;lt;&amp;#47;li&amp;gt;
&lt;li&gt;Renderorder feature description&amp;lt;&amp;#47;li&amp;gt;
&lt;li&gt;Nifty event consuming and disable flags description&amp;lt;&amp;#47;li&amp;gt;
&lt;li&gt;Description of general mouse event processing changes in Nifty 1.3.2&amp;lt;&amp;#47;li&amp;gt;
&lt;li&gt;Dynamically changing effect parameters example&amp;lt;&amp;#47;li&amp;gt;&lt;br /&gt;
&amp;lt;&amp;#47;ul&amp;gt;
&lt;p&gt;:)&lt;br /&gt;
void&lt;/p&gt;
&lt;/li&gt;&lt;/li&gt;&lt;/li&gt;&lt;/li&gt;&lt;/li&gt;&lt;/li&gt;&lt;/li&gt;&lt;/li&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;&lt;/a&gt;&lt;/p&gt;&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/docs/updated-manual-for-nifty-gui-1-3-2-available/&quot;&gt;Updated Manual for Nifty GUI 1.3.2 available&lt;/a&gt; was originally published by  at &lt;a href=&quot;&quot;&gt;Nifty GUI&lt;/a&gt; on November 12, 2012.&lt;/p&gt;</content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Nifty GUI Editor Project]]></title>
  <link rel="alternate" type="text/html" href="/sightings/nifty-gui-editor-project/" />
  <id>/sightings/nifty-gui-editor-project</id>
  <published>2012-11-08T20:28:11+01:00</published>
  <updated>2012-11-08T20:28:11+01:00</updated>
  <author>
    <name></name>
    <uri></uri>
    
  </author>
  <content type="html">&lt;p&gt;There is a Nifty editor project started by Cristiano Aguzzi which looks very promising. It allows you to create Nifty GUI XML by simply adding Nifty Elements and Controls with drag&#39;n&#39;drop!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http:&amp;#47;&amp;#47;niftyguieditor.altervista.org&amp;#47;&quot;&gt;http:&amp;#47;&amp;#47;niftyguieditor.altervista.org&amp;#47;&amp;lt;&amp;#47;a&amp;gt;
&lt;p&gt;It&#39;s a Java Swing application that uses the Nifty Java2D renderer for preview. This means you can change Element properties and see the changes in realtime! Pretty, erm, Nifty! :D&lt;/p&gt;
&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/sightings/nifty-gui-editor-project/&quot;&gt;Nifty GUI Editor Project&lt;/a&gt; was originally published by  at &lt;a href=&quot;&quot;&gt;Nifty GUI&lt;/a&gt; on November 08, 2012.&lt;/p&gt;</content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Nifty 1.3.2 contributors kudos]]></title>
  <link rel="alternate" type="text/html" href="/uncategorized/nifty-1-3-2-contributors-kudos/" />
  <id>/uncategorized/nifty-1-3-2-contributors-kudos</id>
  <published>2012-10-10T00:16:48+02:00</published>
  <updated>2012-10-10T00:16:48+02:00</updated>
  <author>
    <name></name>
    <uri></uri>
    
  </author>
  <content type="html">&lt;p&gt;Well, this was really planned to be a part of yesterdays release announcement but somehow I missed to include it :&amp;#47;&lt;/p&gt;
&lt;p&gt;There are a lot of people worth mentioning here that have helped in Niftys development in one way or another, be it forum posts, comments, bug reports or emails. Actually there are countless people and I&#39;d not be able to list them all! But all of that feedback - may it positive or negative - is greatly appreciated! Keep it coming and thanks A LOT for it!&lt;/p&gt;
&lt;p&gt;This time I&#39;d really like to mention a couple of special people that have provided direct patches and pull requests for Nifty 1.3.2. First of all there is:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Martin Karing (nitram) of &lt;a href=&quot;http:&amp;#47;&amp;#47;illarion.org&amp;#47;&quot;&gt;http:&amp;#47;&amp;#47;illarion.org&amp;#47;&amp;lt;&amp;#47;a&amp;gt;&amp;lt;&amp;#47;strong&amp;gt;
&lt;p&gt;who provided countless suggestions and patches. He rewrote the Slick2D renderer and pretty much rewrote the Tabs control to make it actually usable. So extra special kudos go out to Martin! :D&lt;/p&gt;
&lt;p&gt;Other Nifty 1.3.2 contributors I&#39;d like to thank for improving Nifty are - in alpabetical order:&lt;/p&gt;
&lt;p&gt;Jeremy Woertink &amp;#47; jwoertink&lt;br /&gt;
Joachim Durchholz &amp;#47; toolforger&lt;br /&gt;
Jonathan Fischer Friberg &amp;#47; odyssomay&lt;br /&gt;
Mark &amp;#47; ractoc&lt;br /&gt;
Tony Ivanov &amp;#47; telamohn&lt;/p&gt;
&lt;p&gt;Thank you all. You rock! And see you all in Nifty 2.0! =D&lt;/p&gt;
&lt;p&gt;void&lt;/p&gt;
&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/uncategorized/nifty-1-3-2-contributors-kudos/&quot;&gt;Nifty 1.3.2 contributors kudos&lt;/a&gt; was originally published by  at &lt;a href=&quot;&quot;&gt;Nifty GUI&lt;/a&gt; on October 10, 2012.&lt;/p&gt;</content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Nifty 1.3.2 finally arrived]]></title>
  <link rel="alternate" type="text/html" href="/release/nifty-1-3-2-finally-arrived/" />
  <id>/release/nifty-1-3-2-finally-arrived</id>
  <published>2012-10-08T23:18:02+02:00</published>
  <updated>2012-10-08T23:18:02+02:00</updated>
  <author>
    <name></name>
    <uri></uri>
    
  </author>
  <content type="html">&lt;p&gt;Nifty 1.3.2 is mainly a bugfix release and is compatible with Nifty 1.3.1. There are a couple of nifty new features available too :) We&#39;ve counted 175 individual changes which is &lt;strong&gt;A LOT&amp;lt;&amp;#47;strong&amp;gt;!
&lt;p&gt;There will be an updated Nifty Manual available soon. Until it is available you can find out what&#39;s new in the &lt;a href=&quot;http:&amp;#47;&amp;#47;sourceforge.net&amp;#47;projects&amp;#47;nifty-gui&amp;#47;files&amp;#47;nifty-gui&amp;#47;1.3.2&amp;#47;nifty-1.3.2-changelog.txt&amp;#47;download&quot;&gt;Nifty 1.3.2 change log (sf.net)&amp;lt;&amp;#47;a&amp;gt;
&lt;p&gt;And here are the other Nifty links:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https:&amp;#47;&amp;#47;sourceforge.net&amp;#47;projects&amp;#47;nifty-gui&amp;#47;files&amp;#47;nifty-gui&amp;#47;1.3.2&amp;#47;&quot;&gt;Nifty 1.3.2 Download Folder at sf.net&amp;lt;&amp;#47;a&amp;gt;&lt;br /&gt;
&lt;a href=&quot;http:&amp;#47;&amp;#47;nifty-gui.sourceforge.net&amp;#47;projects&amp;#47;1.3.2&amp;#47;&quot;&gt;Nifty 1.3.2 Maven Projects Page (browse the JavaDoc online!)&amp;lt;&amp;#47;a&amp;gt;&lt;br /&gt;
&lt;a href=&quot;http:&amp;#47;&amp;#47;www.jmonkeyengine.com&amp;#47;nightly&amp;#47;&quot;&gt;Get a nightly jME3 build with Nifty 1.3.2 (jME3_2012-10-08.zip+) &amp;lt;&amp;#47;a&amp;gt;&lt;br /&gt;
&lt;a href=&quot;http:&amp;#47;&amp;#47;nifty-gui.sourceforge.net&amp;#47;webstart&amp;#47;nifty-default-controls-examples-1.3.2.jnlp&quot;&gt;Webstart - Nifty Default Controls Example (1.3.2)&amp;lt;&amp;#47;a&amp;gt;&lt;br /&gt;
&lt;a href=&quot;http:&amp;#47;&amp;#47;nifty-gui.sourceforge.net&amp;#47;webstart&amp;#47;nifty-examples-1.3.2.jnlp&quot;&gt;Webstart - Nifty Standard Examples (1.3.2)&amp;lt;&amp;#47;a&amp;gt;
&lt;p&gt;For Maven simply add our sf.net Nifty Maven Repo to your pom.xml:&lt;/p&gt;
&lt;pre class=&quot;brush:xml&quot;&gt;  &lt;repositories&gt;&lt;br /&gt;
    &lt;repository&gt;&lt;br /&gt;
      &lt;id&gt;nifty-maven-repo.sourceforge.net&amp;lt;&amp;#47;id&amp;gt;&lt;br /&gt;
      &lt;url&gt;http:&amp;#47;&amp;#47;nifty-gui.sourceforge.net&amp;#47;nifty-maven-repo&amp;lt;&amp;#47;url&amp;gt;&lt;br /&gt;
    &amp;lt;&amp;#47;repository&amp;gt;&lt;br /&gt;
  &amp;lt;&amp;#47;repositories&amp;gt;&amp;lt;&amp;#47;pre&amp;gt;
&lt;p&gt;and upgrade your dependency to 1.3.2:&lt;/p&gt;
&lt;pre class=&quot;brush:xml&quot;&gt;    &lt;dependency&gt;&lt;br /&gt;
      &lt;groupid&gt;lessvoid&amp;lt;&amp;#47;groupId&amp;gt;&lt;br /&gt;
      &lt;artifactid&gt;nifty&amp;lt;&amp;#47;artifactId&amp;gt;&lt;br /&gt;
      &lt;version&gt;1.3.2&amp;lt;&amp;#47;version&amp;gt;&lt;br /&gt;
    &amp;lt;&amp;#47;dependency&amp;gt;&amp;lt;&amp;#47;pre&amp;gt;
&lt;p&gt;Have a lot of fun with Nifty 1.3.2! The best Nifty since Nifty ;-)&lt;br /&gt;
void&lt;/p&gt;
&lt;/version&gt;&lt;/artifactid&gt;&lt;/groupid&gt;&lt;/dependency&gt;&lt;/pre&gt;&lt;/url&gt;&lt;/id&gt;&lt;/repository&gt;&lt;/repositories&gt;&lt;/pre&gt;&lt;/a&gt;&lt;/a&gt;&lt;/a&gt;&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;&lt;/a&gt;&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/release/nifty-1-3-2-finally-arrived/&quot;&gt;Nifty 1.3.2 finally arrived&lt;/a&gt; was originally published by  at &lt;a href=&quot;&quot;&gt;Nifty GUI&lt;/a&gt; on October 08, 2012.&lt;/p&gt;</content>
</entry>


  

<entry>
  <title type="html"><![CDATA[java.util.logging (jdk14 logging) oddities explained (and fixed)]]></title>
  <link rel="alternate" type="text/html" href="/bubble/design/java-util-logging-jdk14-logging-oddities-explained-and-fixed/" />
  <id>/bubble/design/java-util-logging-jdk14-logging-oddities-explained-and-fixed</id>
  <published>2012-04-01T18:37:15+02:00</published>
  <updated>2012-04-01T18:37:15+02:00</updated>
  <author>
    <name></name>
    <uri></uri>
    
  </author>
  <content type="html">&lt;p&gt;Usually when you add logging to your application you create a java.util.logging.Logger that has the same name as the class you use the Logger in. Your code might look like this:&lt;/p&gt;
&lt;pre class=&quot;brush:java&quot;&gt;package some.test;
&lt;p&gt;import java.util.logging.Logger;&lt;/p&gt;
&lt;p&gt;public class Main {&lt;br /&gt;
  private static Logger log = Logger.getLogger(Main.class.getName());&lt;/p&gt;
&lt;p&gt;  public static void main(final String[] args) {&lt;br /&gt;
    log.info(&quot;test&quot;);&lt;br /&gt;
  }&lt;br /&gt;
}&lt;br /&gt;
&amp;lt;&amp;#47;pre&amp;gt;&lt;/p&gt;
&lt;p&gt;This works well and you get something like this as the log output:&lt;/p&gt;
&lt;pre class=&quot;brush:java&quot;&gt;01.04.2012 19:10:39 some.test.Main main&lt;br /&gt;
INFO: test&lt;br /&gt;
&amp;lt;&amp;#47;pre&amp;gt;
&lt;p&gt;Now we can easily change the configuration of this logger and change the Loglevel. So for instance when we don&#39;t like any logging we can disable logging for this class either using a configuration file or do it directly from code like so:&lt;/p&gt;
&lt;pre class=&quot;brush:java&quot;&gt;
Logger.getLogger(&quot;some.test&quot;).setLevel(Level.OFF);&amp;lt;&amp;#47;pre&amp;gt;
&lt;p&gt;and the class will not log anymore.&lt;/p&gt;
&lt;p&gt;Sometimes doing this in Nifty and using the name &quot;de.lessvoid.nifty&quot; for instance to shut off the logging refused to work. Some classes simply didn&#39;t stop logging at all. What&#39;s going on?&lt;/p&gt;
&lt;p&gt;After a long headache we&#39;ve finally found out!&lt;/p&gt;
&lt;p&gt;Nifty used some special logger names for eventbus and inputevent logging. Both loggers used special names that did not relate to any class because there where several classes that would need to log those events. So a special name, like &quot;NiftyEventBusLog&quot; made sense for me.&lt;/p&gt;
&lt;p&gt;In some places we had code like that:&lt;/p&gt;
&lt;pre class=&quot;brush:java&quot;&gt;package some.test;
&lt;p&gt;import java.util.logging.Logger;&lt;/p&gt;
&lt;p&gt;public class Main {&lt;br /&gt;
  private static Logger differentLog = Logger.getLogger(&quot;SpecialLog&quot;);&lt;/p&gt;
&lt;p&gt;  public static void main(final String[] args) {&lt;br /&gt;
    differentLog.info(&quot;test&quot;);&lt;br /&gt;
  }&lt;br /&gt;
}&lt;br /&gt;
&amp;lt;&amp;#47;pre&amp;gt;&lt;/p&gt;
&lt;p&gt;I somehow expected the loggername in the log to be &quot;SpecialLog&quot; since it&#39;s the name of the logger. But in fact we get something else:&lt;/p&gt;
&lt;pre class=&quot;brush:java&quot;&gt;
01.04.2012 19:24:41 some.test.Main main&lt;br /&gt;
INFO: test&lt;br /&gt;
&amp;lt;&amp;#47;pre&amp;gt;
&lt;p&gt;O_o&lt;/p&gt;
&lt;p&gt;The information still shows &quot;some.test.Main&quot; since this is the class that actually logged!&lt;/p&gt;
&lt;p&gt;If you now try to disable logging for this class, like we&#39;ve seen above:&lt;/p&gt;
&lt;pre class=&quot;brush:java&quot;&gt;
Logger.getLogger(&quot;some.test&quot;).setLevel(Level.OFF);&amp;lt;&amp;#47;pre&amp;gt;
&lt;p&gt;YOU WOULD STILL SEE THE LINE IN THE LOG - even though you&#39;ve disabled it (kinda) :-)&lt;/p&gt;
&lt;p&gt;Of course to fix this you would need to disable the &quot;SpecialLog&quot; additionaly to &quot;some.test.Main&quot; but that&#39;s pretty odd since you usually don&#39;t know the exact names of all loggers beforehand.&lt;/p&gt;
&lt;p&gt;So to make a long story short Nifty now (current git) removed all the special loggers and always only uses the logger with the name of the current class. When you now disable a logger you should be pretty sure that you really disable any output with that name ;-)&lt;/p&gt;
&lt;p&gt;void&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;EDIT&amp;lt;&amp;#47;strong&amp;gt;
&lt;p&gt;I just realized that it would be very helpful to give you the actual logger names you need to disable when you still use Nifty 1.3.1:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&quot;NiftyInputEventHandlingLog&quot;&amp;lt;&amp;#47;li&amp;gt;
&lt;li&gt;&quot;NiftyEventBusLog&quot;&amp;lt;&amp;#47;li&amp;gt;
&lt;li&gt;&quot;NiftyImageManager&quot;&amp;lt;&amp;#47;li&amp;gt;&lt;br /&gt;
&amp;lt;&amp;#47;ul&amp;gt;
&lt;/li&gt;&lt;/li&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/pre&gt;&lt;/pre&gt;&lt;/pre&gt;&lt;/pre&gt;&lt;/pre&gt;&lt;/pre&gt;

  &lt;p&gt;&lt;a href=&quot;/bubble/design/java-util-logging-jdk14-logging-oddities-explained-and-fixed/&quot;&gt;java.util.logging (jdk14 logging) oddities explained (and fixed)&lt;/a&gt; was originally published by  at &lt;a href=&quot;&quot;&gt;Nifty GUI&lt;/a&gt; on April 01, 2012.&lt;/p&gt;</content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Nifty 1.3.1 webstart demos online]]></title>
  <link rel="alternate" type="text/html" href="/demo/nifty-1-3-1-webstart-demos-online/" />
  <id>/demo/nifty-1-3-1-webstart-demos-online</id>
  <published>2012-01-15T18:54:07+01:00</published>
  <updated>2012-01-15T18:54:07+01:00</updated>
  <author>
    <name></name>
    <uri></uri>
    
  </author>
  <content type="html">&lt;p&gt;In case you&#39;ve missed the online demos with the latest Nifty 1.3.1 release (like Nifty user waltobc6) this might be of interest for you:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http:&amp;#47;&amp;#47;nifty-gui.sourceforge.net&amp;#47;webstart&amp;#47;nifty-default-controls-examples-1.3.1.jnlp&quot;&gt;Nifty Default Controls Example (1.3.1)&amp;lt;&amp;#47;a&amp;gt;
&lt;p&gt;&lt;a href=&quot;http:&amp;#47;&amp;#47;nifty-gui.sourceforge.net&amp;#47;webstart&amp;#47;nifty-default-controls-examples-1.3.1.jnlp&quot;&gt;&amp;lt;img src=&quot;http:&amp;#47;&amp;#47;nifty-gui.lessvoid.com&amp;#47;wp-content&amp;#47;2012&amp;#47;01&amp;#47;Bildschirmfoto-2012-01-15-um-18.36.41-300x238.png&quot; alt=&quot;&quot; title=&quot;Nifty Controls Demo 1.3.1&quot; width=&quot;300&quot; height=&quot;238&quot; class=&quot;aligncenter size-medium wp-image-428&quot; &amp;#47;&amp;gt;&amp;lt;&amp;#47;a&amp;gt;
&lt;p&gt;&lt;a href=&quot;http:&amp;#47;&amp;#47;nifty-gui.sourceforge.net&amp;#47;webstart&amp;#47;nifty-examples-1.3.1.jnlp&quot;&gt;Nifty Standard Examples (1.3.1)&amp;lt;&amp;#47;a&amp;gt;
&lt;p&gt;&lt;a href=&quot;http:&amp;#47;&amp;#47;nifty-gui.sourceforge.net&amp;#47;webstart&amp;#47;nifty-examples-1.3.1.jnlp&quot;&gt;&amp;lt;img src=&quot;http:&amp;#47;&amp;#47;nifty-gui.lessvoid.com&amp;#47;wp-content&amp;#47;2012&amp;#47;01&amp;#47;Bildschirmfoto-2012-01-15-um-18.35.38-300x238.png&quot; alt=&quot;&quot; title=&quot;Nifty Demo 1.3.1&quot; width=&quot;300&quot; height=&quot;238&quot; class=&quot;aligncenter size-medium wp-image-430&quot; &amp;#47;&amp;gt;&amp;lt;&amp;#47;a&amp;gt;
&lt;p&gt;Have fun,&lt;br /&gt;
void&lt;/p&gt;
&lt;/a&gt;&lt;/p&gt;&lt;/a&gt;&lt;/p&gt;&lt;/a&gt;&lt;/p&gt;&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/demo/nifty-1-3-1-webstart-demos-online/&quot;&gt;Nifty 1.3.1 webstart demos online&lt;/a&gt; was originally published by  at &lt;a href=&quot;&quot;&gt;Nifty GUI&lt;/a&gt; on January 15, 2012.&lt;/p&gt;</content>
</entry>


  

<entry>
  <title type="html"><![CDATA[scm branch cleanup]]></title>
  <link rel="alternate" type="text/html" href="/uncategorized/scm-branch-cleanup/" />
  <id>/uncategorized/scm-branch-cleanup</id>
  <published>2012-01-14T01:31:27+01:00</published>
  <updated>2012-01-14T01:31:27+01:00</updated>
  <author>
    <name></name>
    <uri></uri>
    
  </author>
  <content type="html">&lt;p&gt;So now that 1.3.1 is out of the way, we&#39;ve cleaned up the branches in git.&lt;/p&gt;
&lt;p&gt;There are now two main development branches available:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.3&amp;lt;&amp;#47;strong&amp;gt;&lt;br /&gt;
The branch formerly known as 1.3.1. This branch will be the base for an eventual 1.3.2 release. Mostly bugfixes should go in there but maybe some improvements will find their way into this as well.
&lt;p&gt;&lt;strong&gt;master&amp;lt;&amp;#47;strong&amp;gt;&lt;br /&gt;
The main branch and the base for any 1.4 development. This will be an unstable version (1.4.0-SNAPSHOT) for a while but all the new nifty things will be in there.
&lt;p&gt;While speaking of 1.4 there is not yet a final plan for it. We&#39;ll need to sort out all of the bug and feature requests first. Please feel free to suggest other things you&#39;d like to see in the comments or on the forum.&lt;/p&gt;
&lt;p&gt;Both branches are available at &lt;a href=&quot;http:&amp;#47;&amp;#47;sourceforge.net&amp;#47;projects&amp;#47;nifty-gui&amp;#47;develop&quot;&gt;sf.net&amp;lt;&amp;#47;a&amp;gt; and at &lt;a href=&quot;https:&amp;#47;&amp;#47;github.com&amp;#47;void256&amp;#47;nifty-gui&quot;&gt;github&amp;lt;&amp;#47;a&amp;gt;. Synchronizing both repos is a manual process at the moment but works pretty good thanks to git!
&lt;p&gt;Ah and one final word about the git repository at sf.net: Unfortunately the sf.net &quot;code &amp;#47; git&quot; menu lists the wrong repository. I&#39;ve talked to their tech support on IRC and this can&#39;t be changed at the moment :&amp;#47;&lt;/p&gt;
&lt;p&gt;The &quot;develop&quot; menu has the correct URL which is:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git clone git:&amp;#47;&amp;#47;nifty-gui.git.sourceforge.net&amp;#47;gitroot&amp;#47;nifty-gui&amp;#47;nifty&amp;lt;&amp;#47;code&amp;gt;
&lt;p&gt;So the &lt;strong&gt;correct&amp;lt;&amp;#47;strong&amp;gt; URL ends with &quot;nifty&quot; and &lt;strong&gt;not&amp;lt;&amp;#47;strong&amp;gt; with &quot;nifty-gui&quot;! Sorry about this =)
&lt;p&gt;void&lt;/p&gt;
&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/code&gt;&lt;/p&gt;&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/uncategorized/scm-branch-cleanup/&quot;&gt;scm branch cleanup&lt;/a&gt; was originally published by  at &lt;a href=&quot;&quot;&gt;Nifty GUI&lt;/a&gt; on January 14, 2012.&lt;/p&gt;</content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Nifty 1.3.1 has been released]]></title>
  <link rel="alternate" type="text/html" href="/uncategorized/nifty-1-3-1-has-been-released/" />
  <id>/uncategorized/nifty-1-3-1-has-been-released</id>
  <published>2011-12-29T23:53:10+01:00</published>
  <updated>2011-12-29T23:53:10+01:00</updated>
  <author>
    <name></name>
    <uri></uri>
    
  </author>
  <content type="html">&lt;p&gt;&lt;strong&gt;Get it here:&amp;lt;&amp;#47;strong&amp;gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&amp;#47;&amp;#47;sourceforge.net&amp;#47;projects&amp;#47;nifty-gui&amp;#47;files&amp;#47;nifty-gui&amp;#47;1.3.1&amp;#47;&quot;&gt;Nifty 1.3.1 Download Folder at sf.net&amp;lt;&amp;#47;a&amp;gt;&amp;lt;&amp;#47;li&amp;gt;
&lt;li&gt;&lt;a href=&quot;http:&amp;#47;&amp;#47;nifty-gui.sourceforge.net&amp;#47;projects&amp;#47;1.3.1&amp;#47;&quot;&gt;Nifty 1.3.1 Maven Projects Page (You can browse the JavaDoc online here)&amp;lt;&amp;#47;a&amp;gt;&amp;lt;&amp;#47;li&amp;gt;&lt;br /&gt;
&amp;lt;&amp;#47;ul&amp;gt;
&lt;p&gt;When you&#39;re using Maven, you can simply add our sf.net Nifty Maven Repo to your pom.xml:&lt;/p&gt;
&lt;pre class=&quot;brush:xml&quot;&gt;  &lt;repositories&gt;&lt;br /&gt;
    &lt;repository&gt;&lt;br /&gt;
      &lt;id&gt;nifty-maven-repo.sourceforge.net&amp;lt;&amp;#47;id&amp;gt;&lt;br /&gt;
      &lt;url&gt;http:&amp;#47;&amp;#47;nifty-gui.sourceforge.net&amp;#47;nifty-maven-repo&amp;lt;&amp;#47;url&amp;gt;&lt;br /&gt;
    &amp;lt;&amp;#47;repository&amp;gt;&lt;br /&gt;
  &amp;lt;&amp;#47;repositories&amp;gt;&amp;lt;&amp;#47;pre&amp;gt;
&lt;p&gt;and then you can add this dependency:&lt;/p&gt;
&lt;pre class=&quot;brush:xml&quot;&gt;    &lt;dependency&gt;&lt;br /&gt;
      &lt;groupid&gt;lessvoid&amp;lt;&amp;#47;groupId&amp;gt;&lt;br /&gt;
      &lt;artifactid&gt;nifty&amp;lt;&amp;#47;artifactId&amp;gt;&lt;br /&gt;
      &lt;version&gt;1.3.1&amp;lt;&amp;#47;version&amp;gt;&lt;br /&gt;
    &amp;lt;&amp;#47;dependency&amp;gt;&amp;lt;&amp;#47;pre&amp;gt;
&lt;p&gt;You can find the &lt;a href=&quot;http:&amp;#47;&amp;#47;sourceforge.net&amp;#47;projects&amp;#47;nifty-gui&amp;#47;files&amp;#47;nifty-gui&amp;#47;1.3.1&amp;#47;nifty-1.3.1-changelog.txt&amp;#47;download&quot;&gt;nifty-1.3.1-changelog.txt&amp;lt;&amp;#47;a&amp;gt; at sf.net.
&lt;p&gt;Here are some informations about Nifty 1.3.1.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;GC and other speed improvements as well as Bugfixes&amp;lt;&amp;#47;strong&amp;gt;
&lt;p&gt;Nifty 1.3.1 should be compatible with 1.3. Its main purpose is improved performance. Nifty has been optimized for better GC performance as well as render performance. You should see more FPS with this version!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Additional standard controls&amp;lt;&amp;#47;strong&amp;gt;
&lt;p&gt;Thanks to contributions of Nifty user ractoc you can now find a TabsControl, a TreeBoxControl, a ChatControl and a MessageBox in the nifty-default-controls project!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Improved Slick2D Renderer&amp;lt;&amp;#47;strong&amp;gt;
&lt;p&gt;Thanks to Nifty user mkaring the Slick2D renderer has been greatly updated and improved. So Nifty should work a lot better with Slick2D again.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;LWJGL 2.8.2&amp;lt;&amp;#47;strong&amp;gt;
&lt;p&gt;And last but not least Nifty has been updated to the latest stable LWJGL version 2.8.2. Which was easy since thanks to &lt;a href=&quot;http:&amp;#47;&amp;#47;blog.gemserk.com&amp;#47;&quot;&gt;gemserk&amp;lt;&amp;#47;a&amp;gt; LWJGL is in the central maven repository!
&lt;p&gt;Nifty 1.3.1 is not yet in the central. There are still a couple of jars in the Nifty universe that are not available in the central but we&#39;re working on it!&lt;/p&gt;
&lt;p&gt;void&lt;/p&gt;
&lt;/a&gt;&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/a&gt;&lt;/p&gt;&lt;/version&gt;&lt;/artifactid&gt;&lt;/groupid&gt;&lt;/dependency&gt;&lt;/pre&gt;&lt;/url&gt;&lt;/id&gt;&lt;/repository&gt;&lt;/repositories&gt;&lt;/pre&gt;&lt;/a&gt;&lt;/li&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/uncategorized/nifty-1-3-1-has-been-released/&quot;&gt;Nifty 1.3.1 has been released&lt;/a&gt; was originally published by  at &lt;a href=&quot;&quot;&gt;Nifty GUI&lt;/a&gt; on December 29, 2011.&lt;/p&gt;</content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Here is your (very late but epic!) christmas present ...]]></title>
  <link rel="alternate" type="text/html" href="/release/docs/here-is-your-very-late-but-epic-christmas-present/" />
  <id>/release/docs/here-is-your-very-late-but-epic-christmas-present</id>
  <published>2011-12-29T02:30:01+01:00</published>
  <updated>2011-12-29T02:30:01+01:00</updated>
  <author>
    <name></name>
    <uri></uri>
    
  </author>
  <content type="html">&lt;p&gt;Nifty documentation is currently scattered around the internet.&lt;/p&gt;
&lt;p&gt;You can find some pieces in the &lt;a href=&quot;http:&amp;#47;&amp;#47;sourceforge.net&amp;#47;apps&amp;#47;mediawiki&amp;#47;nifty-gui&amp;#47;index.php?title=Main_Page&quot;&gt;Nifty wiki&amp;lt;&amp;#47;a&amp;gt;, on the blog that you&#39;re reading right now, in forums like the &lt;a href=&quot;http:&amp;#47;&amp;#47;sourceforge.net&amp;#47;projects&amp;#47;nifty-gui&amp;#47;forums&amp;#47;forum&amp;#47;807893&quot;&gt;Nifty Forum&amp;lt;&amp;#47;a&amp;gt; at sf.net or the &lt;a href=&quot;http:&amp;#47;&amp;#47;jmonkeyengine.org&amp;#47;groups&amp;#47;gui&amp;#47;forum&amp;#47;&quot;&gt;jMonkeyEngine GUI&amp;lt;&amp;#47;a&amp;gt; Forum. Basically you have some bits of knowledge here and others somewhere else.
&lt;p&gt;Therefore something we&#39;d really like to do was to consolidate all of Niftys documentation into one single information hub. And so we did ... and we&#39;re now proud to present to you:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Nifty GUI 1.3.1 - The Missing Manual&amp;lt;&amp;#47;strong&amp;gt;
&lt;p&gt;[caption id=&quot;attachment_383&quot; align=&quot;aligncenter&quot; width=&quot;300&quot; caption=&quot;Nifty GUI 1.3.1 - The Missing Manual&quot;]&lt;a href=&quot;http:&amp;#47;&amp;#47;sourceforge.net&amp;#47;projects&amp;#47;nifty-gui&amp;#47;files&amp;#47;nifty-gui&amp;#47;nifty-gui-the-manual-v1.0.pdf&amp;#47;download&quot;&gt;&amp;lt;img src=&quot;http:&amp;#47;&amp;#47;nifty-gui.lessvoid.com&amp;#47;wp-content&amp;#47;2011&amp;#47;12&amp;#47;nifty-book-cover-300x211.jpg&quot; alt=&quot;&quot; title=&quot;Nifty GUI 1.3.1 - The Missing Manual&quot; width=&quot;300&quot; height=&quot;211&quot; class=&quot;size-medium wp-image-383&quot; &amp;#47;&amp;gt;&amp;lt;&amp;#47;a&amp;gt;[&amp;#47;caption]
&lt;p&gt;The PDF is an epic 110 pages book &lt;a href=&quot;http:&amp;#47;&amp;#47;sourceforge.net&amp;#47;projects&amp;#47;nifty-gui&amp;#47;files&amp;#47;nifty-gui&amp;#47;nifty-gui-the-manual-v1.0.pdf&amp;#47;download&quot;&gt;hosted at sf.net&amp;lt;&amp;#47;a&amp;gt; that explains (almost) everything that you ever wanted to know about Nifty! The book will act as both a tutorial&amp;#47;introduction to Nifty as well as an in depth reference of the more complicated matters. The PDF contains lots of code examples, screenshots and illustrations.
&lt;p&gt;I hope you had a great christmas 2011 and that you&#39;ll enjoy reading the manual! :D&lt;/p&gt;
&lt;p&gt;void&lt;/p&gt;
&lt;p&gt;PS: In other news Nifty 1.3.1 has been released! &lt;a href=&quot;http:&amp;#47;&amp;#47;sourceforge.net&amp;#47;projects&amp;#47;nifty-gui&amp;#47;files&amp;#47;nifty-gui&amp;#47;1.3.1&amp;#47;&quot;&gt;Get it at sf.net&amp;lt;&amp;#47;a&amp;gt; while it&#39;s hot! I&#39;ll write a proper blog post about 1.3.1 as soon as I&#39;ve got the complete changelog together ;)
&lt;/a&gt;&lt;/p&gt;&lt;/a&gt;&lt;/p&gt;&lt;/a&gt;&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/a&gt;&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/release/docs/here-is-your-very-late-but-epic-christmas-present/&quot;&gt;Here is your (very late but epic!) christmas present ...&lt;/a&gt; was originally published by  at &lt;a href=&quot;&quot;&gt;Nifty GUI&lt;/a&gt; on December 29, 2011.&lt;/p&gt;</content>
</entry>


  

<entry>
  <title type="html"><![CDATA[LWJGL Renderer updated to LWJGL 2.8.1]]></title>
  <link rel="alternate" type="text/html" href="/uncategorized/lwjgl-renderer-updated-to-lwjgl-2-8-1/" />
  <id>/uncategorized/lwjgl-renderer-updated-to-lwjgl-2-8-1</id>
  <published>2011-11-06T19:27:30+01:00</published>
  <updated>2011-11-06T19:27:30+01:00</updated>
  <author>
    <name></name>
    <uri></uri>
    
  </author>
  <content type="html">&lt;p&gt;Thanks to the work of &lt;a href=&quot;http:&amp;#47;&amp;#47;blog.gemserk.com&amp;#47;2011&amp;#47;10&amp;#47;22&amp;#47;lwjgl-on-maven-central&amp;#47;&quot;&gt;Gemserk&amp;lt;&amp;#47;a&amp;gt; LWJGL is now available in the central Maven repo!
&lt;p&gt;So, switching to a new LWJGL version was actually very easy. I&#39;ve just changed the existing dependencies in the pom.xml for the nifty-lwjgl-renderer project to:&lt;/p&gt;
&lt;pre class=&quot;brush:xml&quot;&gt;&lt;dependency&gt;&lt;br /&gt;
  &lt;groupid&gt;org.lwjgl.lwjgl&amp;lt;&amp;#47;groupId&amp;gt;&lt;br /&gt;
  &lt;artifactid&gt;lwjgl&amp;lt;&amp;#47;artifactId&amp;gt;&lt;br /&gt;
  &lt;version&gt;2.8.1&amp;lt;&amp;#47;version&amp;gt;&lt;br /&gt;
&amp;lt;&amp;#47;dependency&amp;gt;&lt;br /&gt;
&lt;dependency&gt;&lt;br /&gt;
  &lt;groupid&gt;org.lwjgl.lwjgl&amp;lt;&amp;#47;groupId&amp;gt;&lt;br /&gt;
  &lt;artifactid&gt;lwjgl_util&amp;lt;&amp;#47;artifactId&amp;gt;&lt;br /&gt;
  &lt;version&gt;2.8.1&amp;lt;&amp;#47;version&amp;gt;&lt;br /&gt;
&amp;lt;&amp;#47;dependency&amp;gt;&amp;lt;&amp;#47;pre&amp;gt;
&lt;p&gt;and that&#39;s all! :D&lt;/p&gt;
&lt;p&gt;As an additional benefit they created a &lt;a href=&quot;http:&amp;#47;&amp;#47;lwjgl.org&amp;#47;wiki&amp;#47;index.php?title=LWJGL_use_in_Maven&quot;&gt;natives plugin&amp;lt;&amp;#47;a&amp;gt; that will unpack all of the LWJGL natives in the target&amp;#47;natives directory. When combined with an &lt;a href=&quot;http:&amp;#47;&amp;#47;code.google.com&amp;#47;p&amp;#47;mavennatives&amp;#47;&quot;&gt;eclipse plugin&amp;lt;&amp;#47;a&amp;gt; this will even add the natives to the native library location inside of Eclipse and ... that&#39;s all! :D
&lt;p&gt;I&#39;ve added it to the nifty-examples pom.xml and now you don&#39;t need to manually specify the &quot;-Djava.library.path=
&lt;path-to-lwjgl&gt;&quot; setting when you run any of the examples anymore! Works pretty well!
&lt;p&gt;&lt;strong&gt;Great work Gemserk!&amp;lt;&amp;#47;strong&amp;gt;&lt;br /&gt;
void
&lt;/strong&gt;&lt;/p&gt;&lt;/path-to-lwjgl&gt;&lt;/p&gt;&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;&lt;/version&gt;&lt;/artifactid&gt;&lt;/groupid&gt;&lt;/dependency&gt;&lt;/version&gt;&lt;/artifactid&gt;&lt;/groupid&gt;&lt;/dependency&gt;&lt;/pre&gt;&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/uncategorized/lwjgl-renderer-updated-to-lwjgl-2-8-1/&quot;&gt;LWJGL Renderer updated to LWJGL 2.8.1&lt;/a&gt; was originally published by  at &lt;a href=&quot;&quot;&gt;Nifty GUI&lt;/a&gt; on November 06, 2011.&lt;/p&gt;</content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Tygron Serious Gaming supports Nifty GUI!]]></title>
  <link rel="alternate" type="text/html" href="/bubble/tygron-serious-gaming-supports-nifty-gui/" />
  <id>/bubble/tygron-serious-gaming-supports-nifty-gui</id>
  <published>2011-10-16T20:32:07+02:00</published>
  <updated>2011-10-16T20:32:07+02:00</updated>
  <author>
    <name></name>
    <uri></uri>
    
  </author>
  <content type="html">&lt;p&gt;Everything started when I was answering &lt;a href=&quot;http:&amp;#47;&amp;#47;jmonkeyengine.org&amp;#47;groups&amp;#47;gui&amp;#47;forum&amp;#47;topic&amp;#47;nifty-export-to-xml&amp;#47;&quot;&gt;a question on the regular jMonkeyEngine3 Nifty GUI support forum&amp;lt;&amp;#47;a&amp;gt; and some questions somewhere in the comment section of this Nifty GUI blog. Someone had build a converter to convert Java Swing GUIs into Nifty GUI XML files. Interesting!
&lt;p&gt;As it turned out these posts were related to each other and were both coming from the same gaming company &lt;a href=&quot;http:&amp;#47;&amp;#47;www.tygron.nl&amp;#47;&quot;&gt;Tygron Serious Gaming&amp;lt;&amp;#47;a&amp;gt; located in The Hague, The Netherlands. A couple of emails later we&#39;ve identified some things that they&#39;d like to be improved as well as other things to be added to Nifty. Since some of their existing game assets relied on the direct display of HTML data - which Nifty did not supported - they were especially interested in adding basic HTML support to Nifty.
&lt;p&gt;Everything was very friendly and they especially made it clear from the very beginning that they had no interest in messing with Niftys &quot;openness&quot; in any way. That means that everything we&#39;d change or add to Nifty will still be available for free without any added restrictions. I think this is not something that you can take for granted when dealing with a corporation. So in general that is a very nice attitude! Kudos for them for this!&lt;/p&gt;
&lt;p&gt;To discuss all of this in more detail they&#39;ve invited me to The Hague and suddenly I was sitting in a train to the Netherlands to meet everyone involved in the project. Travelling to discuss Nifty related things in a meeting! Amazing!&lt;br /&gt;
:D&lt;/p&gt;
&lt;p&gt;As expected everybody was nice and friendly. Marieke - their Office Manager - did an excellent job in organizing my travel and Raymond made sure that I&#39;ve ended up at the right place.&lt;/p&gt;
&lt;p&gt;Here is a little group photo they did. Look for me in a dark gray shirt in the middle of the picture.&lt;/p&gt;
&lt;p&gt;[caption id=&quot;attachment_341&quot; align=&quot;aligncenter&quot; width=&quot;300&quot; caption=&quot;Tygron Nifty GUI Meeting&quot;]&lt;a href=&quot;http:&amp;#47;&amp;#47;nifty-gui.lessvoid.com&amp;#47;wp-content&amp;#47;2011&amp;#47;10&amp;#47;photo-tygron-2011.jpg&quot;&gt;&amp;lt;img src=&quot;http:&amp;#47;&amp;#47;nifty-gui.lessvoid.com&amp;#47;wp-content&amp;#47;2011&amp;#47;10&amp;#47;photo-tygron-2011-300x192.jpg&quot; alt=&quot;&quot; title=&quot;Tygron Meeting&quot; width=&quot;300&quot; height=&quot;192&quot; class=&quot;size-medium wp-image-341&quot; &amp;#47;&amp;gt;&amp;lt;&amp;#47;a&amp;gt;[&amp;#47;caption]
&lt;p&gt;It was really amazing to see Nifty being used in commercial software running on their big screen in the conference room! And seeing the Java Swing to Nifty GUI converter in action was quite amazing as well!&lt;br /&gt;
:D &lt;/p&gt;
&lt;p&gt;So what do you, as a Nifty User, get out of this collaboration? Basically two things: &lt;/p&gt;
&lt;p&gt;- Niftys memory overhead has been greatly reduced. Nifty is now a lot more GC friendly (improved FPS too)&lt;br /&gt;
- The &lt;a href=&quot;https:&amp;#47;&amp;#47;sourceforge.net&amp;#47;apps&amp;#47;mediawiki&amp;#47;nifty-gui&amp;#47;index.php?title=Nifty_Basic_HTML_Module_%28Nifty_1.3.1%29&quot;&gt;HTML Module&amp;lt;&amp;#47;a&amp;gt; is now available and will be a part of Nifty 1.3.1. This adds basic HTML support to Nifty which allows you to generate Nifty elements from basic (!) HTML data.
&lt;p&gt;Well, exciting times for Nifty GUI!&lt;/p&gt;
&lt;p&gt;So, I&#39;d like to take this opportunity to (again) thank Maxim, Jeroen and especially Raymond and William for the invitation and of course Marieke for the whole organisation!&lt;/p&gt;
&lt;p&gt;Thank you Tygron!&lt;br /&gt;
void&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;About Tygron Serious Gaming&lt;br /&gt;
&amp;lt;&amp;#47;strong&amp;gt;&lt;br /&gt;
Tygron Serious Gaming is a serious game developer located in The Hague, The Netherlands. It specializes in bringing real-life complex management challenges that have multiple actors with unique tasks and different interests into a &amp;lsquo;multiplayer serious game&amp;rsquo;, making use of modern game technology.
&lt;/strong&gt;&lt;/p&gt;&lt;/a&gt;&lt;/p&gt;&lt;/a&gt;&lt;/p&gt;&lt;/a&gt;&lt;/p&gt;&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/bubble/tygron-serious-gaming-supports-nifty-gui/&quot;&gt;Tygron Serious Gaming supports Nifty GUI!&lt;/a&gt; was originally published by  at &lt;a href=&quot;&quot;&gt;Nifty GUI&lt;/a&gt; on October 16, 2011.&lt;/p&gt;</content>
</entry>


  

<entry>
  <title type="html"><![CDATA[now git replaces svn completely and Nifty 1.3.1 is scheduled]]></title>
  <link rel="alternate" type="text/html" href="/design/now-git-replaces-svn-completely-and-nifty-1-3-1-is-scheduled/" />
  <id>/design/now-git-replaces-svn-completely-and-nifty-1-3-1-is-scheduled</id>
  <published>2011-09-15T01:08:01+02:00</published>
  <updated>2011-09-15T01:08:01+02:00</updated>
  <author>
    <name></name>
    <uri></uri>
    
  </author>
  <content type="html">&lt;p&gt;The idea to keep svn around for a bugfix release 1.3.1 while keeping the main development for Nifty 1.4 in git sounded reasonable at first. But since we&#39;ve got so quickly used to git going back to svn each time really felt odd :) And although its possible to use git and svn together it kinda made no sense to keep svn around at all. So now everything is git which makes things more clear. Good bye svn!&lt;/p&gt;
&lt;p&gt;So there is now a 1.3.1 branch in git. But wait! Doesn&#39;t Nifty consist of lots of individual jars (nifty, controls, style, renderers, sound-system implementations and so on)? So we need a branch for each individual jar, don&#39;t we?&lt;/p&gt;
&lt;p&gt;Yes, but fortunately we can combine all of the individual maven projects into a &lt;a href=&quot;http:&amp;#47;&amp;#47;www.sonatype.com&amp;#47;books&amp;#47;mvnex-book&amp;#47;reference&amp;#47;multimodule.html&quot;&gt;multi-module maven project&amp;lt;&amp;#47;a&amp;gt;. This way we can now build the nifty-core project together with all of the dependent jars. This gives us the additional benefit to use the parent pom to define versions for plugins we use as well as common dependencies in one place instead of all the individual poms.
&lt;p&gt;To combine the different repositories into one we&#39;ve used yet another feature of git. It&#39;s possible to treat another git repository as a remote repo when both exist on the same filesystem. And this his how it works:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git remote add &lt;name-we-want-to-give-this&gt; &amp;#47;path&amp;#47;to&amp;#47;other&amp;#47;repo&amp;#47;.git&lt;br /&gt;
git fetch &lt;name-we-want-to-give-this&gt;&amp;lt;&amp;#47;code&amp;gt;
&lt;p&gt;And that&#39;s all! We can now merge with this remote one exactly the same as with any regular branch! :)&lt;/p&gt;
&lt;p&gt;So with all of the projects merged into one repository and with all of the maven multi-module setup in place everything looks pretty again. Instead of the individual projects&amp;#47;repos we only need to branch a single git repository&amp;#47;maven project. Here is the &lt;a href=&quot;http:&amp;#47;&amp;#47;nifty-gui.git.sourceforge.net&amp;#47;git&amp;#47;gitweb.cgi?p=nifty-gui&amp;#47;nifty;a=tree;h=refs&amp;#47;heads&amp;#47;1.3.1;hb=refs&amp;#47;heads&amp;#47;1.3.1&quot;&gt;Nifty 1.3.1 Branch in the Git Repository&amp;lt;&amp;#47;a&amp;gt;.
&lt;p&gt;The current development is concentrating on Nifty 1.3.1. This version will contain bugfixes and improvements based on the Nifty 1.3 release. 1.3.1 will be compatible with 1.3 and will especially improve Niftys performance. For instance with some of the latest commits Nifty will now generate much less new objects each frame which will reduces the amout of GC runs necessary by quite a bit already :)&lt;/p&gt;
&lt;p&gt;There are some other performance improvements scheduled as well especially to improve the rendering speed of text elements.&lt;/p&gt;
&lt;p&gt;void&lt;/p&gt;
&lt;/a&gt;&lt;/p&gt;&lt;/name-we-want-to-give-this&gt;&lt;/name-we-want-to-give-this&gt;&lt;/code&gt;&lt;/p&gt;&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/design/now-git-replaces-svn-completely-and-nifty-1-3-1-is-scheduled/&quot;&gt;now git replaces svn completely and Nifty 1.3.1 is scheduled&lt;/a&gt; was originally published by  at &lt;a href=&quot;&quot;&gt;Nifty GUI&lt;/a&gt; on September 15, 2011.&lt;/p&gt;</content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Nifty Sourcecode Management System Organisation]]></title>
  <link rel="alternate" type="text/html" href="/uncategorized/nifty-sourcecode-management-system-organisation/" />
  <id>/uncategorized/nifty-sourcecode-management-system-organisation</id>
  <published>2011-08-06T14:41:02+02:00</published>
  <updated>2011-08-06T14:41:02+02:00</updated>
  <author>
    <name></name>
    <uri></uri>
    
  </author>
  <content type="html">&lt;p&gt;As mentioned previously Nifty is now hosted at sf.net using git scm. Nifty SVN is still available but will mainly be used for a bugfix 1.3.1 Release (if severe bugs surface). The 1.3.1-SNAPSHOT source trees of Nifty are still being build automatically with Jenkins and 1.3.1-SNAPSHOT versions are still being deployed to the &lt;a href=&quot;http:&amp;#47;&amp;#47;nifty-gui.sourceforge.net&amp;#47;nifty-maven-repo&amp;#47;lessvoid&amp;#47;&quot;&gt;Maven Repo for Nifty &amp;lt;&amp;#47;a&amp;gt;. Besides an eventual 1.3.1 release we will not use SVN anymore.
&lt;p&gt;Consequently the Nifty projects available in the &lt;a href=&quot;http:&amp;#47;&amp;#47;nifty-gui.git.sourceforge.net&amp;#47;git&amp;#47;gitweb-index.cgi&quot;&gt;git repo at sf.net&amp;lt;&amp;#47;a&amp;gt; have been updated to 1.4-SNAPSHOT. 1.4 will be build with Jenkins so that you can find nightly builds of 1.4-SNAPSHOT Nifty projects in the &lt;a href=&quot;http:&amp;#47;&amp;#47;nifty-gui.sourceforge.net&amp;#47;nifty-maven-repo&amp;#47;lessvoid&amp;#47;&quot;&gt;Maven Repo for Nifty &amp;lt;&amp;#47;a&amp;gt; as well.
&lt;p&gt;If you had svn write access to the Nifty projects before you will be able to push to git now too.&lt;/p&gt;
&lt;p&gt;There is one exception tho: The main development for Nifty happens on the &quot;develop&quot; Branch of the individual projects. Consequently the &quot;develop&quot; branch will be automatically build and deployed by Jenkins (1.4-SNAPSHOT). Pushing to &quot;master&quot; is restricted and is reserved for release candidates. This should allow the development to continue freely on the &quot;develop&quot; branch (or on any other branches as well!).&lt;/p&gt;
&lt;p&gt;On another note 1.4 is not scheduled yet in any way and should be considered experimental - at least for the time being. So make sure you wear a safety helmet in case it explodes and stuff :D&lt;/p&gt;
&lt;p&gt;void&lt;/p&gt;
&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/uncategorized/nifty-sourcecode-management-system-organisation/&quot;&gt;Nifty Sourcecode Management System Organisation&lt;/a&gt; was originally published by  at &lt;a href=&quot;&quot;&gt;Nifty GUI&lt;/a&gt; on August 06, 2011.&lt;/p&gt;</content>
</entry>

</feed>
